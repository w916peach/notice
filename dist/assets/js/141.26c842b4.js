(window.webpackJsonp=window.webpackJsonp||[]).push([[141],{209:function(t,e,n){"use strict";n.r(e);var s=n(0),a=Object(s.a)({},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),n("p",[n("a",{attrs:{href:"https://travis-ci.org/ternjs/acorn",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"https://travis-ci.org/ternjs/acorn.svg?branch=master",alt:"Build Status"}}),n("OutboundLink")],1),t._v(" "),n("a",{attrs:{href:"https://www.npmjs.com/package/acorn",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"https://img.shields.io/npm/v/acorn.svg",alt:"NPM version"}}),n("OutboundLink")],1),n("br"),t._v(" "),n("a",{attrs:{href:"https://marijnhaverbeke.nl/fund/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Author funding status: "),n("img",{attrs:{src:"https://marijnhaverbeke.nl/fund/status_s.png?force",alt:"maintainer happiness"}}),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("A tiny, fast JavaScript parser, written completely in JavaScript.")]),t._v(" "),t._m(1),t._v(" "),n("p",[t._v("Acorn is open source software released under an\n"),n("a",{attrs:{href:"https://github.com/ternjs/acorn/blob/master/LICENSE",target:"_blank",rel:"noopener noreferrer"}},[t._v("MIT license"),n("OutboundLink")],1),t._v(".")]),t._v(" "),n("p",[t._v("You are welcome to\n"),n("a",{attrs:{href:"https://github.com/ternjs/acorn/issues",target:"_blank",rel:"noopener noreferrer"}},[t._v("report bugs"),n("OutboundLink")],1),t._v(" or create pull\nrequests on "),n("a",{attrs:{href:"https://github.com/ternjs/acorn",target:"_blank",rel:"noopener noreferrer"}},[t._v("github"),n("OutboundLink")],1),t._v(". For questions\nand discussion, please use the\n"),n("a",{attrs:{href:"https://discuss.ternjs.net",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tern discussion forum"),n("OutboundLink")],1),t._v(".")]),t._v(" "),t._m(2),t._v(" "),n("p",[t._v("The easiest way to install acorn is with "),n("a",{attrs:{href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("npm")]),n("OutboundLink")],1),t._v(".")]),t._v(" "),t._m(3),n("p",[t._v("Alternately, download the source.")]),t._v(" "),t._m(4),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),n("p",[n("strong",[t._v("parse")]),n("code",[t._v("(input, options)")]),t._v(" is used to parse a JavaScript program.\nThe "),n("code",[t._v("input")]),t._v(" parameter is a string, "),n("code",[t._v("options")]),t._v(" can be undefined or an\nobject setting some of the options listed below. The return value will\nbe an abstract syntax tree object as specified by the\n"),n("a",{attrs:{href:"https://github.com/estree/estree",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESTree spec"),n("OutboundLink")],1),t._v(".")]),t._v(" "),t._m(9),t._v(" "),n("ul",[t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),n("li",[n("p",[n("strong",[t._v("ranges")]),t._v(": Nodes have their start and end characters offsets\nrecorded in "),n("code",[t._v("start")]),t._v(" and "),n("code",[t._v("end")]),t._v(" properties (directly on the node,\nrather than the "),n("code",[t._v("loc")]),t._v(" object, which holds line/column data. To also\nadd a "),n("a",{attrs:{href:"https://bugzilla.mozilla.org/show_bug.cgi?id=745678",target:"_blank",rel:"noopener noreferrer"}},[t._v("semi-standardized"),n("OutboundLink")],1),t._v(" "),n("code",[t._v("range")]),t._v(" property holding a\n"),n("code",[t._v("[start, end]")]),t._v(" array with the same numbers, set the "),n("code",[t._v("ranges")]),t._v(" option\nto "),n("code",[t._v("true")]),t._v(".")])]),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24)]),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),n("p",[t._v("In ES6 environment, returned result can be used as any other\nprotocol-compliant iterable:")]),t._v(" "),t._m(28),t._m(29),t._v(" "),n("h4",{attrs:{id:"note-on-using-with-escodegen"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#note-on-using-with-escodegen","aria-hidden":"true"}},[t._v("#")]),t._v(" Note on using with "),n("a",{attrs:{href:"https://github.com/estools/escodegen",target:"_blank",rel:"noopener noreferrer"}},[t._v("Escodegen"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("Escodegen supports generating comments from AST, attached in\nEsprima-specific format. In order to simulate same format in\nAcorn, consider following example:")]),t._v(" "),t._m(30),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),t._m(35),t._v(" "),n("p",[n("strong",[t._v("simple")]),n("code",[t._v("(node, visitors, base, state)")]),t._v(" does a 'simple' walk over\na tree. "),n("code",[t._v("node")]),t._v(" should be the AST node to walk, and "),n("code",[t._v("visitors")]),t._v(" an\nobject with properties whose names correspond to node types in the\n"),n("a",{attrs:{href:"https://github.com/estree/estree",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESTree spec"),n("OutboundLink")],1),t._v(". The properties should contain functions\nthat will be called with the node object and, if applicable the state\nat that point. The last two arguments are optional. "),n("code",[t._v("base")]),t._v(" is a walker\nalgorithm, and "),n("code",[t._v("state")]),t._v(" is a start state. The default walker will\nsimply visit all statements and expressions and not produce a\nmeaningful state. (An example of a use of state is to track scope at\neach point in the tree.)")]),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),t._m(38),t._v(" "),t._m(39),t._v(" "),t._m(40),t._v(" "),t._m(41),t._v(" "),t._m(42),t._v(" "),t._m(43),t._v(" "),t._m(44),t._v(" "),n("p",[t._v("The utility spits out the syntax tree as JSON data.")]),t._v(" "),t._m(45),t._v(" "),n("p",[t._v("Acorn is written in ECMAScript 6, as a set of small modules, in the\nproject's "),n("code",[t._v("src")]),t._v(" directory, and compiled down to bigger ECMAScript 3\nfiles in "),n("code",[t._v("dist")]),t._v(" using "),n("a",{attrs:{href:"http://browserify.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("Browserify"),n("OutboundLink")],1),t._v(" and\n"),n("a",{attrs:{href:"http://babeljs.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Babel"),n("OutboundLink")],1),t._v(". If you are already using Babel, you can\nconsider including the modules directly.")]),t._v(" "),t._m(46),t._v(" "),n("p",[t._v("If you are working on Acorn, you'll probably want to try the code out\ndirectly, without an intermediate build step. In your scripts, you can\nregister the Babel require shim like this:")]),t._v(" "),t._m(47),t._v(" "),t._m(48),t._v(" "),t._m(49),t._v(" "),t._m(50),t._v(" "),t._m(51),t._v(" "),t._m(52),t._m(53),t._v(" "),t._m(54),t._v(" "),t._m(55),n("p",[t._v("There is a proof-of-concept JSX plugin in the "),n("a",{attrs:{href:"https://github.com/RReverser/acorn-jsx",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("acorn-jsx")]),n("OutboundLink")],1),t._v(" project.")])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"acorn"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#acorn","aria-hidden":"true"}},[this._v("#")]),this._v(" Acorn")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"community"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#community","aria-hidden":"true"}},[this._v("#")]),this._v(" Community")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"installation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#installation","aria-hidden":"true"}},[this._v("#")]),this._v(" Installation")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("npm install acorn\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("git clone https://github.com/ternjs/acorn.git\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"components"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#components","aria-hidden":"true"}},[this._v("#")]),this._v(" Components")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("When run in a CommonJS (node.js) or AMD environment, exported values\nappear in the interfaces exposed by the individual files, as usual.\nWhen loaded in the browser (Acorn works in any JS-enabled browser more\nrecent than IE5) without any kind of module management, a single\nglobal object "),e("code",[this._v("acorn")]),this._v(" will be defined, and all the exported properties\nwill be added to that.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"main-parser"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#main-parser","aria-hidden":"true"}},[this._v("#")]),this._v(" Main parser")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("This is implemented in "),e("code",[this._v("dist/acorn.js")]),this._v(", and is what you get when you\n"),e("code",[this._v('require("acorn")')]),this._v(" in node.js.")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("When  encountering   a  syntax   error,  the   parser  will   raise  a\n"),n("code",[t._v("SyntaxError")]),t._v(" object with a meaningful  message. The error object will\nhave a "),n("code",[t._v("pos")]),t._v(" property that indicates the character offset at which the\nerror occurred,  and a "),n("code",[t._v("loc")]),t._v("  object that contains a  "),n("code",[t._v("{line, column}")]),t._v("\nobject referring to that same position.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[e("strong",[this._v("ecmaVersion")]),this._v(": Indicates the ECMAScript version to parse. Must be\neither 3, 5, or 6. This influences support for strict mode, the set\nof reserved words, and support for new syntax features. Default is 5.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[e("strong",[this._v("sourceType")]),this._v(": Indicate the mode the code should be parsed in. Can be\neither "),e("code",[this._v('"script"')]),this._v(" or "),e("code",[this._v('"module"')]),this._v(".")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[e("strong",[this._v("onInsertedSemicolon")]),this._v(": If given a callback, that callback will be\ncalled whenever a missing semicolon is inserted by the parser. The\ncallback will be given the character offset of the point where the\nsemicolon is inserted as argument, and if "),e("code",[this._v("locations")]),this._v(" is on, also a\n"),e("code",[this._v("{line, column}")]),this._v(" object representing this position.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[e("strong",[this._v("onTrailingComma")]),this._v(": Like "),e("code",[this._v("onInsertedSemicolon")]),this._v(", but for trailing\ncommas.")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("li",[n("p",[n("strong",[t._v("allowReserved")]),t._v(": If "),n("code",[t._v("false")]),t._v(", using a reserved word will generate\nan error. Defaults to "),n("code",[t._v("true")]),t._v(" for "),n("code",[t._v("ecmaVersion")]),t._v(" 3, "),n("code",[t._v("false")]),t._v(" for higher\nversions. When given the value "),n("code",[t._v('"never"')]),t._v(", reserved words and\nkeywords can also not be used as property names (as in Internet\nExplorer's old parser).")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[e("strong",[this._v("allowReturnOutsideFunction")]),this._v(": By default, a return statement at\nthe top level raises an error. Set this to "),e("code",[this._v("true")]),this._v(" to accept such\ncode.")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("li",[n("p",[n("strong",[t._v("allowImportExportEverywhere")]),t._v(": By default, "),n("code",[t._v("import")]),t._v(" and "),n("code",[t._v("export")]),t._v("\ndeclarations can only appear at a program's top level. Setting this\noption to "),n("code",[t._v("true")]),t._v(" allows them anywhere where a statement is allowed.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[e("strong",[this._v("allowHashBang")]),this._v(": When this is enabled (off by default), if the\ncode starts with the characters "),e("code",[this._v("#!")]),this._v(" (as in a shellscript), the\nfirst line will be treated as a comment.")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("li",[n("p",[n("strong",[t._v("locations")]),t._v(": When "),n("code",[t._v("true")]),t._v(", each node has a "),n("code",[t._v("loc")]),t._v(" object attached\nwith "),n("code",[t._v("start")]),t._v(" and "),n("code",[t._v("end")]),t._v(" subobjects, each of which contains the\none-based line and zero-based column numbers in "),n("code",[t._v("{line, column}")]),t._v("\nform. Default is "),n("code",[t._v("false")]),t._v(".")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("li",[n("p",[n("strong",[t._v("onToken")]),t._v(": If a function is passed for this option, each found\ntoken will be passed in same format as tokens returned from\n"),n("code",[t._v("tokenizer().getToken()")]),t._v(".")]),t._v(" "),n("p",[t._v("If array is passed, each found token is pushed to it.")]),t._v(" "),n("p",[t._v("Note that you are not allowed to call the parser from the\ncallback—that will corrupt its internal state.")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("li",[n("p",[n("strong",[t._v("onComment")]),t._v(": If a function is passed for this option, whenever a\ncomment is encountered the function will be called with the\nfollowing parameters:")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("block")]),t._v(": "),n("code",[t._v("true")]),t._v(" if the comment is a block comment, false if it\nis a line comment.")]),t._v(" "),n("li",[n("code",[t._v("text")]),t._v(": The content of the comment.")]),t._v(" "),n("li",[n("code",[t._v("start")]),t._v(": Character offset of the start of the comment.")]),t._v(" "),n("li",[n("code",[t._v("end")]),t._v(": Character offset of the end of the comment.")])]),t._v(" "),n("p",[t._v("When the "),n("code",[t._v("locations")]),t._v(" options is on, the "),n("code",[t._v("{line, column}")]),t._v(" locations\nof the comment’s start and end are passed as two additional\nparameters.")]),t._v(" "),n("p",[t._v("If array is passed for this option, each found comment is pushed\nto it as object in Esprima format:")]),t._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token string"}},[t._v('"type"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"Line"')]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"Block"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{attrs:{class:"token string"}},[t._v('"value"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"comment text"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{attrs:{class:"token string"}},[t._v('"start"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Number"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{attrs:{class:"token string"}},[t._v('"end"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Number"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// If `locations` option is on:")]),t._v("\n  "),n("span",{attrs:{class:"token string"}},[t._v('"loc"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token string"}},[t._v('"start"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("line"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Number"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" column"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Number"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token string"}},[t._v('"end"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("line"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Number"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" column"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Number"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// If `ranges` option is on:")]),t._v("\n  "),n("span",{attrs:{class:"token string"}},[t._v('"range"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Number"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Number"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br")])]),n("p",[t._v("Note that you are not allowed to call the parser from the\ncallback—that will corrupt its internal state.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[e("strong",[this._v("program")]),this._v(": It is possible to parse multiple files into a single\nAST by passing the tree produced by parsing the first file as the\n"),e("code",[this._v("program")]),this._v(' option in subsequent parses. This will add the toplevel\nforms of the parsed file to the "Program" (top) node of an existing\nparse tree.')])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("li",[n("p",[n("strong",[t._v("sourceFile")]),t._v(": When the "),n("code",[t._v("locations")]),t._v(" option is "),n("code",[t._v("true")]),t._v(", you can pass\nthis option to add a "),n("code",[t._v("source")]),t._v(" attribute in every node’s "),n("code",[t._v("loc")]),t._v("\nobject. Note that the contents of this option are not examined or\nprocessed in any way; you are free to use whatever format you\nchoose.")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("li",[n("p",[n("strong",[t._v("directSourceFile")]),t._v(": Like "),n("code",[t._v("sourceFile")]),t._v(", but a "),n("code",[t._v("sourceFile")]),t._v(" property\nwill be added directly to the nodes, rather than the "),n("code",[t._v("loc")]),t._v(" object.")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("li",[n("p",[n("strong",[t._v("preserveParens")]),t._v(": If this option is "),n("code",[t._v("true")]),t._v(", parenthesized expressions\nare represented by (non-standard) "),n("code",[t._v("ParenthesizedExpression")]),t._v(" nodes\nthat have a single "),n("code",[t._v("expression")]),t._v(" property containing the expression\ninside parentheses.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("parseExpressionAt")]),e("code",[this._v("(input, offset, options)")]),this._v(" will parse a single\nexpression in a string, and return its AST. It will not complain if\nthere is more of the string left after the expression.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("getLineInfo")]),e("code",[this._v("(input, offset)")]),this._v(" can be used to get a "),e("code",[this._v("{line, column}")]),this._v(" object for a given program string and character offset.")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("strong",[t._v("tokenizer")]),n("code",[t._v("(input, options)")]),t._v(" returns an object with a "),n("code",[t._v("getToken")]),t._v("\nmethod that can be called repeatedly to get the next token, a "),n("code",[t._v("{start, end, type, value}")]),t._v(" object (with added "),n("code",[t._v("loc")]),t._v(" property when the\n"),n("code",[t._v("locations")]),t._v(" option is enabled and "),n("code",[t._v("range")]),t._v(" property when the "),n("code",[t._v("ranges")]),t._v("\noption is enabled). When the token's type is "),n("code",[t._v("tokTypes.eof")]),t._v(", you\nshould stop calling the method, since it will keep returning that same\ntoken forever.")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" token "),n("span",{attrs:{class:"token keyword"}},[t._v("of")]),t._v(" acorn"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("tokenizer")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// iterate over the tokens")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// transform code to array of tokens:")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" tokens "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v("acorn"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("tokenizer")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("tokTypes")]),this._v(" holds an object mapping names to the token type objects\nthat end up in the "),e("code",[this._v("type")]),this._v(" properties of tokens.")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" comments "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tokens "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ast "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" acorn"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("parse")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'var x = 42; // answer'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{attrs:{class:"token comment"}},[t._v("// collect ranges for each node")]),t._v("\n\tranges"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),n("span",{attrs:{class:"token comment"}},[t._v("// collect comments in Esprima's format")]),t._v("\n\tonComment"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" comments"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),n("span",{attrs:{class:"token comment"}},[t._v("// collect token ranges")]),t._v("\n\tonToken"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" tokens\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// attach comments using collected information")]),t._v("\nescodegen"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("attachComments")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ast"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" comments"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tokens"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// generate code")]),t._v("\nconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("escodegen"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("generate")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ast"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("comment"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// > 'var x = 42;    // answer'")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"dist-acorn-loose-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dist-acorn-loose-js","aria-hidden":"true"}},[this._v("#")]),this._v(" dist/acorn_loose.js")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("This file implements an error-tolerant parser. It exposes a single\nfunction. The loose parser is accessible in node.js via "),e("code",[this._v('require("acorn/dist/acorn_loose")')]),this._v(".")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("strong",[t._v("parse_dammit")]),n("code",[t._v("(input, options)")]),t._v(" takes the same arguments and\nreturns the same syntax tree as the "),n("code",[t._v("parse")]),t._v(" function in "),n("code",[t._v("acorn.js")]),t._v(",\nbut never raises an error, and will do its best to parse syntactically\ninvalid code in as meaningful a way as it can. It'll insert identifier\nnodes with name "),n("code",[t._v('"✖"')]),t._v(" as placeholders in places where it can't make\nsense of the input. Depends on "),n("code",[t._v("acorn.js")]),t._v(", because it uses the same\ntokenizer.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"dist-walk-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dist-walk-js","aria-hidden":"true"}},[this._v("#")]),this._v(" dist/walk.js")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Implements an abstract syntax tree walker. Will store its interface in\n"),e("code",[this._v("acorn.walk")]),this._v(" when loaded without a module system.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("ancestor")]),e("code",[this._v("(node, visitors, base, state)")]),this._v(" does a 'simple' walk over\na tree, building up an array of ancestor nodes (including the current node)\nand passing the array to callbacks in the "),e("code",[this._v("state")]),this._v(" parameter.")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("strong",[t._v("recursive")]),n("code",[t._v("(node, state, functions, base)")]),t._v(" does a 'recursive'\nwalk, where the walker functions are responsible for continuing the\nwalk on the child nodes of their target node. "),n("code",[t._v("state")]),t._v(" is the start\nstate, and "),n("code",[t._v("functions")]),t._v(" should contain an object that maps node types\nto walker functions. Such functions are called with "),n("code",[t._v("(node, state, c)")]),t._v("\narguments, and can cause the walk to continue on a sub-node by calling\nthe "),n("code",[t._v("c")]),t._v(" argument on it with "),n("code",[t._v("(node, state)")]),t._v(" arguments. The optional\n"),n("code",[t._v("base")]),t._v(" argument provides the fallback walker functions for node types\nthat aren't handled in the "),n("code",[t._v("functions")]),t._v(" object. If not given, the\ndefault walkers will be used.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("make")]),e("code",[this._v("(functions, base)")]),this._v(" builds a new walker object by using the\nwalker functions in "),e("code",[this._v("functions")]),this._v(" and filling in the missing ones by\ntaking defaults from "),e("code",[this._v("base")]),this._v(".")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("strong",[t._v("findNodeAt")]),n("code",[t._v("(node, start, end, test, base, state)")]),t._v(" tries to\nlocate a node in a tree at the given start and/or end offsets, which\nsatisfies the predicate "),n("code",[t._v("test")]),t._v(". "),n("code",[t._v("start")]),t._v(" and "),n("code",[t._v("end")]),t._v(" can be either "),n("code",[t._v("null")]),t._v("\n(as wildcard) or a number. "),n("code",[t._v("test")]),t._v(" may be a string (indicating a node\ntype) or a function that takes "),n("code",[t._v("(nodeType, node)")]),t._v(" arguments and\nreturns a boolean indicating whether this node is interesting. "),n("code",[t._v("base")]),t._v("\nand "),n("code",[t._v("state")]),t._v(" are optional, and can be used to specify a custom walker.\nNodes are tested from inner to outer, so if two nodes match the\nboundaries, the inner one will be preferred.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("findNodeAround")]),e("code",[this._v("(node, pos, test, base, state)")]),this._v(" is a lot like\n"),e("code",[this._v("findNodeAt")]),this._v(", but will match any node that exists 'around' (spanning)\nthe given position.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("findNodeAfter")]),e("code",[this._v("(node, pos, test, base, state)")]),this._v(" is similar to\n"),e("code",[this._v("findNodeAround")]),this._v(", but will match all nodes "),e("em",[this._v("after")]),this._v(" the given position\n(testing outer nodes before inner nodes).")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"command-line-interface"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#command-line-interface","aria-hidden":"true"}},[this._v("#")]),this._v(" Command line interface")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("The "),e("code",[this._v("bin/acorn")]),this._v(" utility can be used to parse a file from the command\nline. It accepts as arguments its input file and the following\noptions:")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ul",[n("li",[n("p",[n("code",[t._v("--ecma3|--ecma5|--ecma6")]),t._v(": Sets the ECMAScript version to parse. Default is\nversion 5.")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("--module")]),t._v(": Sets the parsing mode to "),n("code",[t._v('"module"')]),t._v(". Is set to "),n("code",[t._v('"script"')]),t._v(" otherwise.")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("--locations")]),t._v(': Attaches a "loc" object to each node with "start" and\n"end" subobjects, each of which contains the one-based line and\nzero-based column numbers in '),n("code",[t._v("{line, column}")]),t._v(" form.")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("--allow-hash-bang")]),t._v(": If the code starts with the characters #! (as in a shellscript), the first line will be treated as a comment.")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("--compact")]),t._v(": No whitespace is used in the AST output.")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("--silent")]),t._v(": Do not output the AST, just return the exit status.")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("--help")]),t._v(": Print the usage information and quit.")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"build-system"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#build-system","aria-hidden":"true"}},[this._v("#")]),this._v(" Build system")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("The command-line test runner ("),e("code",[this._v("npm test")]),this._v(") uses the ES6 modules. The\nbrowser-based test page ("),e("code",[this._v("test/index.html")]),this._v(") uses the compiled modules.\nThe "),e("code",[this._v("bin/build-acorn.js")]),this._v(" script builds the latter from the former.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v('require("babel-core/register")\n')])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("That will allow you to directly "),e("code",[this._v("require")]),this._v(" the ES6 modules.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"plugins"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#plugins","aria-hidden":"true"}},[this._v("#")]),this._v(" Plugins")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Acorn is designed support allow plugins which, within reasonable\nbounds, redefine the way the parser works. Plugins can add new token\ntypes and new tokenizer contexts (if necessary), and extend methods in\nthe parser object. This is not a clean, elegant API—using it requires\nan understanding of Acorn's internals, and plugins are likely to break\nwhenever those internals are significantly changed. But still, it is\n"),e("em",[this._v("possible")]),this._v(", in this way, to create parsers for JavaScript dialects\nwithout forking all of Acorn. And in principle it is even possible to\ncombine such plugins, so that if you have, for example, a plugin for\nparsing types and a plugin for parsing JSX-style XML literals, you\ncould load them both and parse code with both JSX tags and types.")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("A plugin should register itself by adding a property to\n"),n("code",[t._v("acorn.plugins")]),t._v(", which holds a function. Calling "),n("code",[t._v("acorn.parse")]),t._v(", a\n"),n("code",[t._v("plugins")]),t._v(" option can be passed, holding an object mapping plugin names\nto configuration values (or just "),n("code",[t._v("true")]),t._v(" for plugins that don't take\noptions). After the parser object has been created, the initialization\nfunctions for the chosen plugins are called with "),n("code",[t._v("(parser, configValue)")]),t._v(" arguments. They are expected to use the "),n("code",[t._v("parser.extend")]),t._v("\nmethod to extend parser methods. For example, the "),n("code",[t._v("readToken")]),t._v(" method\ncould be extended like this:")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[t._v("parser"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("extend")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"readToken"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextMethod"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("code"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Reading a token!"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" nextMethod"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("call")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("this")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" code"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("The "),e("code",[this._v("nextMethod")]),this._v(" argument passed to "),e("code",[this._v("extend")]),this._v("'s second argument is the\nprevious value of this method, and should usually be called through to\nwhenever the extended method does not handle the call itself.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Similarly, the loose parser allows plugins to register themselves via\n"),e("code",[this._v("acorn.pluginsLoose")]),this._v(".  The extension mechanism is the same as for the\nnormal parser:")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[t._v("looseParser"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("extend")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"readToken"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextMethod"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Reading a token in the loose parser!"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" nextMethod"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("call")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("this")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])])}],!1,null,null,null);a.options.__file="README.md";e.default=a.exports}}]);
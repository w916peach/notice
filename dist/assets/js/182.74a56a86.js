(window.webpackJsonp=window.webpackJsonp||[]).push([[182],{168:function(t,s,e){"use strict";e.r(s);var n=e(0),a=Object(n.a)({},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"content"},[t._m(0),t._v(" "),e("p",[e("a",{attrs:{href:"https://travis-ci.org/mishoo/UglifyJS2",target:"_blank",rel:"noopener noreferrer"}},[e("img",{attrs:{src:"https://travis-ci.org/mishoo/UglifyJS2.svg",alt:"Build Status"}}),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("UglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.")]),t._v(" "),e("p",[t._v("This page documents the command line utility.  For\n"),e("a",{attrs:{href:"http://lisperator.net/uglifyjs/",target:"_blank",rel:"noopener noreferrer"}},[t._v("API and internals documentation see my website"),e("OutboundLink")],1),t._v(".\nThere's also an\n"),e("a",{attrs:{href:"http://lisperator.net/uglifyjs/#demo",target:"_blank",rel:"noopener noreferrer"}},[t._v("in-browser online demo"),e("OutboundLink")],1),t._v(" (for Firefox,\nChrome and probably Safari).")]),t._v(" "),t._m(1),t._v(" "),e("ul",[t._m(2),t._v(" "),t._m(3),t._v(" "),e("li",[t._v("Those wishing to minify ES2015+ (ES6+) should use the "),e("code",[t._v("npm")]),t._v(" package "),e("a",{attrs:{href:"https://github.com/mishoo/UglifyJS2/tree/harmony",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[t._v("uglify-es")]),e("OutboundLink")],1),t._v(".")])]),t._v(" "),t._m(4),t._v(" "),e("p",[t._v("First make sure you have installed the latest version of "),e("a",{attrs:{href:"http://nodejs.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("node.js"),e("OutboundLink")],1),t._v("\n(You may need to restart your computer after this step).")]),t._v(" "),e("p",[t._v("From NPM for use as a command line app:")]),t._v(" "),t._m(5),t._v(" "),e("p",[t._v("From NPM for programmatic use:")]),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),e("p",[t._v("UglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.")]),t._v(" "),e("p",[t._v("If you want to read from STDIN instead, pass a single dash instead of input\nfiles.")]),t._v(" "),e("p",[t._v("If you wish to pass your options before the input files, separate the two with\na double dash to prevent input files being used as option arguments:")]),t._v(" "),t._m(9),t._v(" "),e("p",[t._v("The available options are:")]),t._v(" "),t._m(10),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),e("p",[t._v("For example:")]),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),e("p",[t._v("When you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.")]),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),t._m(35),t._m(36),t._v(" "),e("p",[t._v("Using the name cache is not necessary if you compress all your files in a\nsingle call to UglifyJS.")]),t._v(" "),t._m(37),t._v(" "),t._m(38),t._v(" "),t._m(39),t._m(40),t._v(" "),t._m(41),t._v(" "),t._m(42),t._v(" "),t._m(43),t._v(" "),t._m(44),t._v(" "),t._m(45),t._v(" "),t._m(46),t._v(" "),t._m(47),t._v(" "),t._m(48),t._v(" "),t._m(49),t._v(" "),t._m(50),t._v(" "),t._m(51),t._m(52),t._v(" "),t._m(53),t._v(" "),t._m(54),t._v(" "),t._m(55),e("p",[t._v("and build your code like this:")]),t._v(" "),t._m(56),t._v(" "),t._m(57),t._v(" "),t._m(58),t._v(" "),t._m(59),t._v(" "),t._m(60),t._v(" "),t._m(61),t._m(62),t._v(" "),t._m(63),t._v(" "),t._m(64),t._v(" "),t._m(65),t._v(" "),t._m(66),t._v(" "),e("p",[t._v("Note, however, that there might be situations where comments are lost.  For\nexample:")]),t._v(" "),t._m(67),t._m(68),t._v(" "),e("p",[t._v("The safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.")]),t._v(" "),t._m(69),t._v(" "),e("p",[t._v("UglifyJS2 has its own abstract syntax tree format; for\n"),e("a",{attrs:{href:"http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/",target:"_blank",rel:"noopener noreferrer"}},[t._v("practical reasons"),e("OutboundLink")],1),t._v("\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.")]),t._v(" "),e("p",[t._v("For example "),e("a",{attrs:{href:"https://github.com/ternjs/acorn",target:"_blank",rel:"noopener noreferrer"}},[t._v("Acorn"),e("OutboundLink")],1),t._v(" is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:")]),t._v(" "),t._m(70),t._v(" "),t._m(71),t._v(" "),t._m(72),t._v(" "),t._m(73),t._v(" "),e("p",[t._v("Acorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.")]),t._v(" "),t._m(74),t._v(" "),e("p",[t._v("Now you can use UglifyJS as any other intermediate tool for transforming\nJavaScript ASTs in SpiderMonkey format.")]),t._v(" "),e("p",[t._v("Example:")]),t._v(" "),t._m(75),e("p",[t._v("Check out\n"),e("a",{attrs:{href:"http://rreverser.com/using-mozilla-ast-with-uglifyjs/",target:"_blank",rel:"noopener noreferrer"}},[t._v("original blog post"),e("OutboundLink")],1),t._v("\nfor details.")]),t._v(" "),t._m(76),t._v(" "),e("p",[t._v("Assuming installation via NPM, you can load UglifyJS in your application\nlike this:")]),t._v(" "),t._m(77),e("p",[t._v("It exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.")]),t._v(" "),t._m(78),t._v(" "),t._m(79),t._v(" "),t._m(80),e("p",[t._v("You can also compress multiple files:")]),t._v(" "),t._m(81),e("p",[t._v("To generate a source map:")]),t._v(" "),t._m(82),e("p",[t._v("To generate a source map with the fromString option, you can also use an object:")]),t._v(" "),t._m(83),t._m(84),t._v(" "),e("p",[t._v("The "),e("code",[t._v("file")]),t._v(" attribute in the source map (see "),e("a",{attrs:{href:"https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit",target:"_blank",rel:"noopener noreferrer"}},[t._v("the spec"),e("OutboundLink")],1),t._v(") will\nuse "),e("code",[t._v("outFileName")]),t._v(" firstly, if it's falsy, then will be deduced from\n"),e("code",[t._v("outSourceMap")]),t._v(" (by removing "),e("code",[t._v("'.map'")]),t._v(").")]),t._v(" "),t._m(85),t._v(" "),e("p",[t._v("You can also specify sourceRoot property to be included in source map:")]),t._v(" "),t._m(86),t._m(87),t._v(" "),t._m(88),t._m(89),t._v(" "),t._m(90),t._m(91),t._v(" "),t._m(92),t._v(" "),t._m(93),e("p",[t._v("Other options:")]),t._v(" "),e("ul",[t._m(94),t._v(" "),t._m(95),t._v(" "),t._m(96),t._v(" "),t._m(97),t._v(" "),e("li",[e("p",[e("code",[t._v("output")]),t._v(" (default "),e("code",[t._v("null")]),t._v(") — pass an object if you wish to specify\nadditional "),e("a",{attrs:{href:"http://lisperator.net/uglifyjs/codegen",target:"_blank",rel:"noopener noreferrer"}},[t._v("output options"),e("OutboundLink")],1),t._v(".  The defaults are optimized\nfor best compression.")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("compress")]),t._v(" (default "),e("code",[t._v("{}")]),t._v(") — pass "),e("code",[t._v("false")]),t._v(" to skip compressing entirely.\nPass an object to specify custom "),e("a",{attrs:{href:"http://lisperator.net/uglifyjs/compress",target:"_blank",rel:"noopener noreferrer"}},[t._v("compressor options"),e("OutboundLink")],1),t._v(".")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("parse")]),t._v(" (default {}) — pass an object if you wish to specify some\nadditional "),e("a",{attrs:{href:"http://lisperator.net/uglifyjs/parser",target:"_blank",rel:"noopener noreferrer"}},[t._v("parser options"),e("OutboundLink")],1),t._v(". (not all options available... see below)")])])]),t._v(" "),t._m(98),t._v(" "),t._m(99),t._v(" "),e("p",[t._v("Examples:")]),t._v(" "),t._m(100),t._m(101),t._v(" "),t._m(102),t._v(" "),t._m(103),t._v(" "),t._m(104),t._v(" "),t._m(105),t._v(" "),t._m(106),t._v(" "),t._m(107),t._m(108),t._v(" "),t._m(109),t._v(" "),e("p",[t._v("The last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:")]),t._v(" "),t._m(110),t._m(111),t._v(" "),t._m(112),t._v(" "),t._m(113),t._v(" "),t._m(114),t._m(115),t._v(" "),e("p",[t._v("Like this:")]),t._v(" "),t._m(116),t._m(117),t._v(" "),t._m(118),t._v(" "),t._m(119),t._v(" "),t._m(120),t._v(" "),t._m(121),t._m(122),t._v(" "),t._m(123),t._v(" "),t._m(124),e("p",[t._v("or, for a shortcut you can do:")]),t._v(" "),t._m(125),t._m(126),t._v(" "),t._m(127),t._v(" "),t._m(128),t._v(" "),e("p",[t._v("The comment token has these properties:")]),t._v(" "),t._m(129),t._v(" "),t._m(130),t._v(" "),t._m(131),t._v(" "),e("p",[t._v("You need to pass the "),e("code",[t._v("source_map")]),t._v(" argument when calling "),e("code",[t._v("print")]),t._v(".  It needs\nto be a "),e("code",[t._v("SourceMap")]),t._v(" object (which is a thin wrapper on top of the\n"),e("a",{attrs:{href:"https://github.com/mozilla/source-map",target:"_blank",rel:"noopener noreferrer"}},[t._v("source-map"),e("OutboundLink")],1),t._v(" library).")]),t._v(" "),e("p",[t._v("Example:")]),t._v(" "),t._m(132),t._m(133),t._v(" "),e("ul",[t._m(134),t._v(" "),e("li",[e("p",[e("code",[t._v("root")]),t._v(": the "),e("code",[t._v("sourceRoot")]),t._v(" property (see the "),e("a",{attrs:{href:"https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit",target:"_blank",rel:"noopener noreferrer"}},[t._v("spec"),e("OutboundLink")],1),t._v(")")])]),t._v(" "),t._m(135)]),t._v(" "),t._m(136),t._v(" "),t._m(137)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"uglifyjs-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#uglifyjs-2","aria-hidden":"true"}},[this._v("#")]),this._v(" UglifyJS 2")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"note"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#note","aria-hidden":"true"}},[this._v("#")]),this._v(" Note:")])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("code",[this._v("uglify-js")]),this._v(" only supports ECMAScript 5 (ES5).")])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[this._v("Support for "),s("code",[this._v("const")]),this._v(" is "),s("a",{attrs:{href:"#support-for-const"}},[this._v("present but incomplete")]),this._v(", and may not be\ntransformed properly.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"install"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#install","aria-hidden":"true"}},[this._v("#")]),this._v(" Install")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",[s("code",[this._v("npm install uglify-js -g\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",[s("code",[this._v("npm install uglify-js\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"usage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#usage","aria-hidden":"true"}},[this._v("#")]),this._v(" Usage")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",[s("code",[this._v("uglifyjs [input files] [options]\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",[s("code",[this._v("uglifyjs --compress --mangle -- input.js\n")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('  --source-map                  Specify an output file where to generate source\n                                map.\n  --source-map-root             The path to the original source to be included\n                                in the source map.\n  --source-map-url              The path to the source map to be added in //#\n                                sourceMappingURL.  Defaults to the value passed\n                                with --source-map.\n  --source-map-include-sources  Pass this flag if you want to include the\n                                content of source files in the source map as\n                                sourcesContent property.\n  --source-map-inline           Write base64-encoded source map to the end of js output.\n  --in-source-map               Input source map, useful if you\'re compressing\n                                JS that was generated from some other original\n                                code. Specify "inline" if the source map is included\n                                inline with the sources.\n  --screw-ie8                   Use this flag if you don\'t wish to support\n                                Internet Explorer 6/7/8.\n                                By default UglifyJS will not try to be IE-proof.\n  --support-ie8                 Use this flag to support Internet Explorer 6/7/8.\n                                Equivalent to setting `screw_ie8: false` in `minify()`\n                                for `compress`, `mangle` and `output` options.\n  --expr                        Parse a single expression, rather than a\n                                program (for parsing JSON)\n  -p, --prefix                  Skip prefix for original filenames that appear\n                                in source maps. For example -p 3 will drop 3\n                                directories from file names and ensure they are\n                                relative paths. You can also specify -p\n                                relative, which will make UglifyJS figure out\n                                itself the relative paths between original\n                                sources, the source map and the output file.\n  -o, --output                  Output file (default STDOUT).\n  -b, --beautify                Beautify output/specify output options.\n  -m, --mangle                  Mangle names/pass mangler options.\n  -r, --reserved                Reserved names to exclude from mangling.\n  -c, --compress                Enable compressor/pass compressor options, e.g.\n                                `-c \'if_return=false,pure_funcs=["Math.pow","console.log"]\'`\n                                Use `-c` with no argument to enable default compression\n                                options.\n  -d, --define                  Global definitions\n  -e, --enclose                 Embed everything in a big function, with a\n                                configurable parameter/argument list.\n  --comments                    Preserve copyright comments in the output. By\n                                default this works like Google Closure, keeping\n                                JSDoc-style comments that contain "@license" or\n                                "@preserve". You can optionally pass one of the\n                                following arguments to this flag:\n                                - "all" to keep all comments\n                                - a valid JS RegExp like `/foo/` or `/^!/` to\n                                keep only matching comments.\n                                Note that currently not *all* comments can be\n                                kept when compression is on, because of dead\n                                code removal or cascading statements into\n                                sequences.\n  --preamble                    Preamble to prepend to the output.  You can use\n                                this to insert a comment, for example for\n                                licensing information.  This will not be\n                                parsed, but the source map will adjust for its\n                                presence.\n  --stats                       Display operations run time on STDERR.\n  --acorn                       Use Acorn for parsing.\n  --spidermonkey                Assume input files are SpiderMonkey AST format\n                                (as JSON).\n  --self                        Build itself (UglifyJS2) as a library (implies\n                                --wrap=UglifyJS --export-all)\n  --wrap                        Embed everything in a big function, making the\n                                “exports” and “global” variables available. You\n                                need to pass an argument to this option to\n                                specify the name that your module will take\n                                when included in, say, a browser.\n  --export-all                  Only used when --wrap, this tells UglifyJS to\n                                add code to automatically export all globals.\n  --lint                        Display some scope warnings\n  -v, --verbose                 Verbose\n  -V, --version                 Print version number and exit.\n  --noerr                       Don\'t throw an error for unknown options in -c,\n                                -b or -m.\n  --bare-returns                Allow return outside of functions.  Useful when\n                                minifying CommonJS modules and Userscripts that\n                                may be anonymous function wrapped (IIFE) by the\n                                .user.js engine `caller`.\n  --keep-fnames                 Do not mangle/drop function names.  Useful for\n                                code relying on Function.prototype.name.\n  --reserved-file               File containing reserved names\n  --reserve-domprops            Make (most?) DOM properties reserved for\n                                --mangle-props\n  --mangle-props                Mangle property names (default `0`). Set to\n                                `true` or `1` to mangle all property names. Set\n                                to `unquoted` or `2` to only mangle unquoted\n                                property names. Mode `2` also enables the\n                                `keep_quoted_props` beautifier option to\n                                preserve the quotes around property names and\n                                disables the `properties` compressor option to\n                                prevent rewriting quoted properties with dot\n                                notation. You can override these by setting\n                                them explicitly on the command line.\n  --mangle-regex                Only mangle property names matching the regex\n  --name-cache                  File to hold mangled names mappings\n  --pure-funcs                  Functions that can be safely removed if their\n                                return value is not used, e.g.\n                                `--pure-funcs Math.floor console.info`\n                                (requires `--compress`)\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br"),e("span",{staticClass:"line-number"},[t._v("27")]),e("br"),e("span",{staticClass:"line-number"},[t._v("28")]),e("br"),e("span",{staticClass:"line-number"},[t._v("29")]),e("br"),e("span",{staticClass:"line-number"},[t._v("30")]),e("br"),e("span",{staticClass:"line-number"},[t._v("31")]),e("br"),e("span",{staticClass:"line-number"},[t._v("32")]),e("br"),e("span",{staticClass:"line-number"},[t._v("33")]),e("br"),e("span",{staticClass:"line-number"},[t._v("34")]),e("br"),e("span",{staticClass:"line-number"},[t._v("35")]),e("br"),e("span",{staticClass:"line-number"},[t._v("36")]),e("br"),e("span",{staticClass:"line-number"},[t._v("37")]),e("br"),e("span",{staticClass:"line-number"},[t._v("38")]),e("br"),e("span",{staticClass:"line-number"},[t._v("39")]),e("br"),e("span",{staticClass:"line-number"},[t._v("40")]),e("br"),e("span",{staticClass:"line-number"},[t._v("41")]),e("br"),e("span",{staticClass:"line-number"},[t._v("42")]),e("br"),e("span",{staticClass:"line-number"},[t._v("43")]),e("br"),e("span",{staticClass:"line-number"},[t._v("44")]),e("br"),e("span",{staticClass:"line-number"},[t._v("45")]),e("br"),e("span",{staticClass:"line-number"},[t._v("46")]),e("br"),e("span",{staticClass:"line-number"},[t._v("47")]),e("br"),e("span",{staticClass:"line-number"},[t._v("48")]),e("br"),e("span",{staticClass:"line-number"},[t._v("49")]),e("br"),e("span",{staticClass:"line-number"},[t._v("50")]),e("br"),e("span",{staticClass:"line-number"},[t._v("51")]),e("br"),e("span",{staticClass:"line-number"},[t._v("52")]),e("br"),e("span",{staticClass:"line-number"},[t._v("53")]),e("br"),e("span",{staticClass:"line-number"},[t._v("54")]),e("br"),e("span",{staticClass:"line-number"},[t._v("55")]),e("br"),e("span",{staticClass:"line-number"},[t._v("56")]),e("br"),e("span",{staticClass:"line-number"},[t._v("57")]),e("br"),e("span",{staticClass:"line-number"},[t._v("58")]),e("br"),e("span",{staticClass:"line-number"},[t._v("59")]),e("br"),e("span",{staticClass:"line-number"},[t._v("60")]),e("br"),e("span",{staticClass:"line-number"},[t._v("61")]),e("br"),e("span",{staticClass:"line-number"},[t._v("62")]),e("br"),e("span",{staticClass:"line-number"},[t._v("63")]),e("br"),e("span",{staticClass:"line-number"},[t._v("64")]),e("br"),e("span",{staticClass:"line-number"},[t._v("65")]),e("br"),e("span",{staticClass:"line-number"},[t._v("66")]),e("br"),e("span",{staticClass:"line-number"},[t._v("67")]),e("br"),e("span",{staticClass:"line-number"},[t._v("68")]),e("br"),e("span",{staticClass:"line-number"},[t._v("69")]),e("br"),e("span",{staticClass:"line-number"},[t._v("70")]),e("br"),e("span",{staticClass:"line-number"},[t._v("71")]),e("br"),e("span",{staticClass:"line-number"},[t._v("72")]),e("br"),e("span",{staticClass:"line-number"},[t._v("73")]),e("br"),e("span",{staticClass:"line-number"},[t._v("74")]),e("br"),e("span",{staticClass:"line-number"},[t._v("75")]),e("br"),e("span",{staticClass:"line-number"},[t._v("76")]),e("br"),e("span",{staticClass:"line-number"},[t._v("77")]),e("br"),e("span",{staticClass:"line-number"},[t._v("78")]),e("br"),e("span",{staticClass:"line-number"},[t._v("79")]),e("br"),e("span",{staticClass:"line-number"},[t._v("80")]),e("br"),e("span",{staticClass:"line-number"},[t._v("81")]),e("br"),e("span",{staticClass:"line-number"},[t._v("82")]),e("br"),e("span",{staticClass:"line-number"},[t._v("83")]),e("br"),e("span",{staticClass:"line-number"},[t._v("84")]),e("br"),e("span",{staticClass:"line-number"},[t._v("85")]),e("br"),e("span",{staticClass:"line-number"},[t._v("86")]),e("br"),e("span",{staticClass:"line-number"},[t._v("87")]),e("br"),e("span",{staticClass:"line-number"},[t._v("88")]),e("br"),e("span",{staticClass:"line-number"},[t._v("89")]),e("br"),e("span",{staticClass:"line-number"},[t._v("90")]),e("br"),e("span",{staticClass:"line-number"},[t._v("91")]),e("br"),e("span",{staticClass:"line-number"},[t._v("92")]),e("br"),e("span",{staticClass:"line-number"},[t._v("93")]),e("br"),e("span",{staticClass:"line-number"},[t._v("94")]),e("br"),e("span",{staticClass:"line-number"},[t._v("95")]),e("br"),e("span",{staticClass:"line-number"},[t._v("96")]),e("br"),e("span",{staticClass:"line-number"},[t._v("97")]),e("br"),e("span",{staticClass:"line-number"},[t._v("98")]),e("br"),e("span",{staticClass:"line-number"},[t._v("99")]),e("br"),e("span",{staticClass:"line-number"},[t._v("100")]),e("br"),e("span",{staticClass:"line-number"},[t._v("101")]),e("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Specify "),s("code",[this._v("--output")]),this._v(" ("),s("code",[this._v("-o")]),this._v(") to declare the output file.  Otherwise the output\ngoes to STDOUT.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"source-map-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#source-map-options","aria-hidden":"true"}},[this._v("#")]),this._v(" Source map options")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("UglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n"),s("code",[this._v("--source-map output.js.map")]),this._v(" (full path to the file where you want the\nsource map dumped).")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Additionally you might need "),s("code",[this._v("--source-map-root")]),this._v(" to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use "),s("code",[this._v("--prefix")]),this._v(" ("),s("code",[this._v("-p")]),this._v(") to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",[s("code",[this._v("uglifyjs /home/doe/work/foo/src/js/file1.js \\\n         /home/doe/work/foo/src/js/file2.js \\\n         -o foo.min.js \\\n         --source-map foo.min.js.map \\\n         --source-map-root http://foo.com/src \\\n         -p 5 -c -m\n")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("The above will compress and mangle "),e("code",[t._v("file1.js")]),t._v(" and "),e("code",[t._v("file2.js")]),t._v(", will drop the\noutput in "),e("code",[t._v("foo.min.js")]),t._v(" and the source map in "),e("code",[t._v("foo.min.js.map")]),t._v(".  The source\nmapping will refer to "),e("code",[t._v("http://foo.com/src/js/file1.js")]),t._v(" and\n"),e("code",[t._v("http://foo.com/src/js/file2.js")]),t._v(" (in fact it will list "),e("code",[t._v("http://foo.com/src")]),t._v("\nas the source map root, and the original files as "),e("code",[t._v("js/file1.js")]),t._v(" and\n"),e("code",[t._v("js/file2.js")]),t._v(").")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"composed-source-map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#composed-source-map","aria-hidden":"true"}},[this._v("#")]),this._v(" Composed source map")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("To use this feature you need to pass "),s("code",[this._v("--in-source-map /path/to/input/source.map")]),this._v(" or "),s("code",[this._v("--in-source-map inline")]),this._v(" if the source map is\nincluded inline with the sources. Normally the input source map should also\npoint to the file containing the generated JS, so if that's correct you can\nomit input files from the command line.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"mangler-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mangler-options","aria-hidden":"true"}},[this._v("#")]),this._v(" Mangler options")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("To enable the mangler you need to pass "),s("code",[this._v("--mangle")]),this._v(" ("),s("code",[this._v("-m")]),this._v(").  The following\n(comma-separated) options are supported:")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[e("p",[e("code",[t._v("toplevel")]),t._v(" — mangle names declared in the toplevel scope (disabled by\ndefault).")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("eval")]),t._v(" — mangle names visible in scopes where "),e("code",[t._v("eval")]),t._v(" or "),e("code",[t._v("with")]),t._v(" are used\n(disabled by default).")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("When mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with "),s("code",[this._v("--reserved")]),this._v(" ("),s("code",[this._v("-r")]),this._v(") — pass a\ncomma-separated list of names.  For example:")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",[s("code",[this._v("uglifyjs ... -m -r '$,require,exports'\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("to prevent the "),s("code",[this._v("require")]),this._v(", "),s("code",[this._v("exports")]),this._v(" and "),s("code",[this._v("$")]),this._v(" names from being changed.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"mangling-property-names-mangle-props"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mangling-property-names-mangle-props","aria-hidden":"true"}},[this._v("#")]),this._v(" Mangling property names ("),s("code",[this._v("--mangle-props")]),this._v(")")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("Note:")]),this._v(" this will probably break your code.  Mangling property names is a\nseparate step, different from variable name mangling.  Pass\n"),s("code",[this._v("--mangle-props")]),this._v(".  It will mangle all properties that are seen in some\nobject literal, or that are assigned to.  For example:")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  foo"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nx"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bar "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{attrs:{class:"token number"}},[t._v("2")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nx"),e("span",{attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{attrs:{class:"token string"}},[t._v('"baz"')]),e("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{attrs:{class:"token number"}},[t._v("3")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nx"),e("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("condition "),e("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"moo"')]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"boo"')]),e("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{attrs:{class:"token number"}},[t._v("4")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("log")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("something")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("In the above code, "),e("code",[t._v("foo")]),t._v(", "),e("code",[t._v("bar")]),t._v(", "),e("code",[t._v("baz")]),t._v(", "),e("code",[t._v("moo")]),t._v(" and "),e("code",[t._v("boo")]),t._v(" will be replaced\nwith single characters, while "),e("code",[t._v("something()")]),t._v(" will be left as is.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("In order for this to be of any use, we should avoid mangling standard JS\nnames.  For instance, if your code would contain "),s("code",[this._v("x.length = 10")]),this._v(", then\n"),s("code",[this._v("length")]),this._v(" becomes a candidate for mangling and it will be mangled throughout\nthe code, regardless if it's being used as part of your own objects or\naccessing an array's length.  To avoid that, you can use "),s("code",[this._v("--reserved-file")]),this._v("\nto pass a filename that should contain the names to be excluded from\nmangling.  This file can be used both for excluding variable names and\nproperty names.  It could look like this, for example:")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{attrs:{class:"token string"}},[t._v('"vars"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"define"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"require"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{attrs:{class:"token string"}},[t._v('"props"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"length"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"prototype"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("--reserved-file")]),this._v(" can be an array of file names (either a single\ncomma-separated argument, or you can pass multiple "),s("code",[this._v("--reserved-file")]),this._v("\narguments) — in this case it will exclude names from all those files.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("A default exclusion file is provided in "),s("code",[this._v("tools/domprops.json")]),this._v(" which should\ncover most standard JS and DOM properties defined in various browsers.  Pass\n"),s("code",[this._v("--reserve-domprops")]),this._v(" to read that in.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("You can also use a regular expression to define which property names should be\nmangled.  For example, "),s("code",[this._v('--mangle-regex="/^_/"')]),this._v(" will only mangle property names\nthat start with an underscore.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("When you compress multiple files using this option, in order for them to\nwork together in the end we need to ensure somehow that one property gets\nmangled to the same name in all of them.  For this, pass "),s("code",[this._v("--name-cache filename.json")]),this._v(" and UglifyJS will maintain these mappings in a file which can\nthen be reused.  It should be initially empty.  Example:")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("rm -f /tmp/cache.json  # start fresh\nuglifyjs file1.js file2.js --mangle-props --name-cache /tmp/cache.json -o part1.js\nuglifyjs file3.js file4.js --mangle-props --name-cache /tmp/cache.json -o part2.js\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br"),s("span",{staticClass:"line-number"},[this._v("2")]),s("br"),s("span",{staticClass:"line-number"},[this._v("3")]),s("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Now, "),s("code",[this._v("part1.js")]),this._v(" and "),s("code",[this._v("part2.js")]),this._v(" will be consistent with each other in terms\nof mangled property names.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"mangling-unquoted-names-mangle-props-unquoted-or-mangle-props-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mangling-unquoted-names-mangle-props-unquoted-or-mangle-props-2","aria-hidden":"true"}},[this._v("#")]),this._v(" Mangling unquoted names ("),s("code",[this._v("--mangle-props=unquoted")]),this._v(" or "),s("code",[this._v("--mangle-props=2")]),this._v(")")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Using quoted property name ("),s("code",[this._v('o["foo"]')]),this._v(") reserves the property name ("),s("code",[this._v("foo")]),this._v(")\nso that it is not mangled throughout the entire script even when used in an\nunquoted style ("),s("code",[this._v("o.foo")]),this._v("). Example:")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('$ echo \'var o={"foo":1, bar:3}; o.foo += o.bar; console.log(o.foo);\' | uglifyjs --mangle-props=2 -mc\nvar o={"foo":1,a:3};o.foo+=o.a,console.log(o.foo);\n')])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br"),s("span",{staticClass:"line-number"},[this._v("2")]),s("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"debugging-property-name-mangling"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#debugging-property-name-mangling","aria-hidden":"true"}},[this._v("#")]),this._v(" Debugging property name mangling")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("You can also pass "),s("code",[this._v("--mangle-props-debug")]),this._v(" in order to mangle property names\nwithout completely obscuring them. For example the property "),s("code",[this._v("o.foo")]),this._v("\nwould mangle to "),s("code",[this._v("o._$foo$_")]),this._v(" with this option. This allows property mangling\nof a large codebase while still being able to debug the code and identify\nwhere mangling is breaking things.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("You can also pass a custom suffix using "),s("code",[this._v("--mangle-props-debug=XYZ")]),this._v(". This would then\nmangle "),s("code",[this._v("o.foo")]),this._v(" to "),s("code",[this._v("o._$foo$XYZ_")]),this._v(". You can change this each time you compile a\nscript to identify how a property got mangled. One technique is to pass a\nrandom number on every compile to simulate mangling changing with different\ninputs (e.g. as you update the input script with new properties), and to help\nidentify mistakes like writing mangled keys to storage.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"compressor-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#compressor-options","aria-hidden":"true"}},[this._v("#")]),this._v(" Compressor options")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("You need to pass "),e("code",[t._v("--compress")]),t._v(" ("),e("code",[t._v("-c")]),t._v(") to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n"),e("code",[t._v("foo=bar")]),t._v(", or just "),e("code",[t._v("foo")]),t._v(" (the latter implies a boolean option that you want\nto set "),e("code",[t._v("true")]),t._v("; it's effectively a shortcut for "),e("code",[t._v("foo=true")]),t._v(").")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[e("p",[e("code",[t._v("sequences")]),t._v(" (default: true) -- join consecutive simple statements using the\ncomma operator.  May be set to a positive integer to specify the maximum number\nof consecutive comma sequences that will be generated. If this option is set to\n"),e("code",[t._v("true")]),t._v(" then the default "),e("code",[t._v("sequences")]),t._v(" limit is "),e("code",[t._v("200")]),t._v(". Set option to "),e("code",[t._v("false")]),t._v(" or "),e("code",[t._v("0")]),t._v("\nto disable. The smallest "),e("code",[t._v("sequences")]),t._v(" length is "),e("code",[t._v("2")]),t._v(". A "),e("code",[t._v("sequences")]),t._v(" value of "),e("code",[t._v("1")]),t._v("\nis grandfathered to be equivalent to "),e("code",[t._v("true")]),t._v(" and as such means "),e("code",[t._v("200")]),t._v(". On rare\noccasions the default sequences limit leads to very slow compress times in which\ncase a value of "),e("code",[t._v("20")]),t._v(" or less is recommended.")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("properties")]),t._v(" -- rewrite property access using the dot notation, for\nexample "),e("code",[t._v('foo["bar"] → foo.bar')])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("dead_code")]),t._v(" -- remove unreachable code")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("drop_debugger")]),t._v(" -- remove "),e("code",[t._v("debugger;")]),t._v(" statements")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("unsafe")]),t._v(' (default: false) -- apply "unsafe" transformations (discussion below)')])]),t._v(" "),e("li",[e("p",[e("code",[t._v("unsafe_comps")]),t._v(" (default: false) -- Reverse "),e("code",[t._v("<")]),t._v(" and "),e("code",[t._v("<=")]),t._v(" to "),e("code",[t._v(">")]),t._v(" and "),e("code",[t._v(">=")]),t._v(" to\nallow improved compression. This might be unsafe when an at least one of two\noperands is an object with computed values due the use of methods like "),e("code",[t._v("get")]),t._v(",\nor "),e("code",[t._v("valueOf")]),t._v(". This could cause change in execution order after operands in the\ncomparison are switching. Compression only works if both "),e("code",[t._v("comparisons")]),t._v(" and\n"),e("code",[t._v("unsafe_comps")]),t._v(" are both set to true.")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("unsafe_math")]),t._v(" (default: false) -- optimize numerical expressions like\n"),e("code",[t._v("2 * x * 3")]),t._v(" into "),e("code",[t._v("6 * x")]),t._v(", which may give imprecise floating point results.")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("unsafe_proto")]),t._v(" (default: false) -- optimize expressions like\n"),e("code",[t._v("Array.prototype.slice.call(a)")]),t._v(" into "),e("code",[t._v("[].slice.call(a)")])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("unsafe_regexp")]),t._v(" (default: false) -- enable substitutions of variables with\n"),e("code",[t._v("RegExp")]),t._v(" values the same way as if they are constants.")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("conditionals")]),t._v(" -- apply optimizations for "),e("code",[t._v("if")]),t._v("-s and conditional\nexpressions")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("comparisons")]),t._v(" -- apply certain optimizations to binary nodes, for example:\n"),e("code",[t._v("!(a <= b) → a > b")]),t._v(" (only when "),e("code",[t._v("unsafe_comps")]),t._v("), attempts to negate binary\nnodes, e.g. "),e("code",[t._v("a = !b && !c && !d && !e → a=!(b||c||d||e)")]),t._v(" etc.")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("evaluate")]),t._v(" -- attempt to evaluate constant expressions")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("booleans")]),t._v(" -- various optimizations for boolean context, for example "),e("code",[t._v("!!a ? b : c → a ? b : c")])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("loops")]),t._v(" -- optimizations for "),e("code",[t._v("do")]),t._v(", "),e("code",[t._v("while")]),t._v(" and "),e("code",[t._v("for")]),t._v(" loops when we can\nstatically determine the condition")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("unused")]),t._v(" -- drop unreferenced functions and variables (simple direct variable\nassignments do not count as references unless set to "),e("code",[t._v('"keep_assign"')]),t._v(")")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("toplevel")]),t._v(" -- drop unreferenced functions ("),e("code",[t._v('"funcs"')]),t._v(") and/or variables ("),e("code",[t._v('"vars"')]),t._v(")\nin the toplevel scope ("),e("code",[t._v("false")]),t._v(" by default, "),e("code",[t._v("true")]),t._v(" to drop both unreferenced\nfunctions and variables)")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("top_retain")]),t._v(" -- prevent specific toplevel functions and variables from "),e("code",[t._v("unused")]),t._v("\nremoval (can be array, comma-separated, RegExp or function. Implies "),e("code",[t._v("toplevel")]),t._v(")")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("hoist_funs")]),t._v(" -- hoist function declarations")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("hoist_vars")]),t._v(" (default: false) -- hoist "),e("code",[t._v("var")]),t._v(" declarations (this is "),e("code",[t._v("false")]),t._v("\nby default because it seems to increase the size of the output in general)")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("if_return")]),t._v(" -- optimizations for if/return and if/continue")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("join_vars")]),t._v(" -- join consecutive "),e("code",[t._v("var")]),t._v(" statements")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("cascade")]),t._v(" -- small optimization for sequences, transform "),e("code",[t._v("x, x")]),t._v(" into "),e("code",[t._v("x")]),t._v("\nand "),e("code",[t._v("x = something(), x")]),t._v(" into "),e("code",[t._v("x = something()")])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("collapse_vars")]),t._v(" -- Collapse single-use "),e("code",[t._v("var")]),t._v(" and "),e("code",[t._v("const")]),t._v(" definitions\nwhen possible.")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("reduce_vars")]),t._v(" -- Improve optimization on variables assigned with and\nused as constant values.")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("warnings")]),t._v(" -- display warnings when dropping unreachable code or unused\ndeclarations etc.")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("negate_iife")]),t._v(' -- negate "Immediately-Called Function Expressions"\nwhere the return value is discarded, to avoid the parens that the\ncode generator would insert.')])]),t._v(" "),e("li",[e("p",[e("code",[t._v("pure_getters")]),t._v(" -- the default is "),e("code",[t._v("false")]),t._v(".  If you pass "),e("code",[t._v("true")]),t._v(" for\nthis, UglifyJS will assume that object property access\n(e.g. "),e("code",[t._v("foo.bar")]),t._v(" or "),e("code",[t._v('foo["bar"]')]),t._v(") doesn't have any side effects.\nSpecify "),e("code",[t._v('"strict"')]),t._v(" to treat "),e("code",[t._v("foo.bar")]),t._v(" as side-effect-free only when\n"),e("code",[t._v("foo")]),t._v(" is certain to not throw, i.e. not "),e("code",[t._v("null")]),t._v(" or "),e("code",[t._v("undefined")]),t._v(".")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("pure_funcs")]),t._v(" -- default "),e("code",[t._v("null")]),t._v(".  You can pass an array of names and\nUglifyJS will assume that those functions do not produce side\neffects.  DANGER: will not check if the name is redefined in scope.\nAn example case here, for instance "),e("code",[t._v("var q = Math.floor(a/b)")]),t._v(".  If\nvariable "),e("code",[t._v("q")]),t._v(" is not used elsewhere, UglifyJS will drop it, but will\nstill keep the "),e("code",[t._v("Math.floor(a/b)")]),t._v(", not knowing what it does.  You can\npass "),e("code",[t._v("pure_funcs: [ 'Math.floor' ]")]),t._v(" to let it know that this\nfunction won't produce any side effect, in which case the whole\nstatement would get discarded.  The current implementation adds some\noverhead (compression will be slower).")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("drop_console")]),t._v(" -- default "),e("code",[t._v("false")]),t._v(".  Pass "),e("code",[t._v("true")]),t._v(" to discard calls to\n"),e("code",[t._v("console.*")]),t._v(" functions. If you wish to drop a specific function call\nsuch as "),e("code",[t._v("console.info")]),t._v(" and/or retain side effects from function arguments\nafter dropping the function call then use "),e("code",[t._v("pure_funcs")]),t._v(" instead.")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("expression")]),t._v(" -- default "),e("code",[t._v("false")]),t._v(".  Pass "),e("code",[t._v("true")]),t._v(" to preserve completion values\nfrom terminal statements without "),e("code",[t._v("return")]),t._v(", e.g. in bookmarklets.")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("keep_fargs")]),t._v(" -- default "),e("code",[t._v("true")]),t._v(".  Prevents the\ncompressor from discarding unused function arguments.  You need this\nfor code which relies on "),e("code",[t._v("Function.length")]),t._v(".")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("keep_fnames")]),t._v(" -- default "),e("code",[t._v("false")]),t._v(".  Pass "),e("code",[t._v("true")]),t._v(" to prevent the\ncompressor from discarding function names.  Useful for code relying on\n"),e("code",[t._v("Function.prototype.name")]),t._v(". See also: the "),e("code",[t._v("keep_fnames")]),t._v(" "),e("a",{attrs:{href:"#mangle"}},[t._v("mangle option")]),t._v(".")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("passes")]),t._v(" -- default "),e("code",[t._v("1")]),t._v(". Number of times to run compress with a maximum of 3.\nIn some cases more than one pass leads to further compressed code.  Keep in\nmind more passes will take more time.")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("keep_infinity")]),t._v(" -- default "),e("code",[t._v("false")]),t._v(". Pass "),e("code",[t._v("true")]),t._v(" to prevent "),e("code",[t._v("Infinity")]),t._v(" from\nbeing compressed into "),e("code",[t._v("1/0")]),t._v(", which may cause performance issues on Chrome.")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("side_effects")]),t._v(" -- default "),e("code",[t._v("true")]),t._v(". Pass "),e("code",[t._v("false")]),t._v(' to disable potentially dropping\nfunctions marked as "pure".  A function call is marked as "pure" if a comment\nannotation '),e("code",[t._v("/*@__PURE__*/")]),t._v(" or "),e("code",[t._v("/*#__PURE__*/")]),t._v(" immediately precedes the call. For\nexample: "),e("code",[t._v("/*@__PURE__*/foo();")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"the-unsafe-option"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-unsafe-option","aria-hidden":"true"}},[this._v("#")]),this._v(" The "),s("code",[this._v("unsafe")]),this._v(" option")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("It enables some transformations that "),s("em",[this._v("might")]),this._v(" break code logic in certain\ncontrived cases, but should be fine for most code.  You might want to try it\non your own code, it should reduce the minified size.  Here's what happens\nwhen this flag is on:")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[e("code",[t._v("new Array(1, 2, 3)")]),t._v(" or "),e("code",[t._v("Array(1, 2, 3)")]),t._v(" → "),e("code",[t._v("[ 1, 2, 3 ]")])]),t._v(" "),e("li",[e("code",[t._v("new Object()")]),t._v(" → "),e("code",[t._v("{}")])]),t._v(" "),e("li",[e("code",[t._v("String(exp)")]),t._v(" or "),e("code",[t._v("exp.toString()")]),t._v(" → "),e("code",[t._v('"" + exp')])]),t._v(" "),e("li",[e("code",[t._v("new Object/RegExp/Function/Error/Array (...)")]),t._v(" → we discard the "),e("code",[t._v("new")])]),t._v(" "),e("li",[e("code",[t._v('typeof foo == "undefined"')]),t._v(" → "),e("code",[t._v("foo === void 0")])]),t._v(" "),e("li",[e("code",[t._v("void 0")]),t._v(" → "),e("code",[t._v("undefined")]),t._v(' (if there is a variable named "undefined" in\nscope; we do it because the variable name will be mangled, typically\nreduced to a single character)')])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"conditional-compilation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#conditional-compilation","aria-hidden":"true"}},[this._v("#")]),this._v(" Conditional compilation")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("You can use the "),s("code",[this._v("--define")]),this._v(" ("),s("code",[this._v("-d")]),this._v(") switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass "),s("code",[this._v("--define DEBUG=false")]),this._v(" then, coupled with\ndead code removal UglifyJS will discard the following from the output:")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token constant"}},[t._v("DEBUG")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("log")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token string"}},[t._v('"debug stuff"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("You can specify nested constants in the form of "),s("code",[this._v("--define env.DEBUG=false")]),this._v(".")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("UglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass "),s("code",[this._v("warnings=false")]),this._v(" to turn off "),s("em",[this._v("all")]),this._v(" warnings.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Another way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n"),s("code",[this._v("build/defines.js")]),this._v(" file with the following:")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{attrs:{class:"token constant"}},[t._v("DEBUG")]),t._v(" "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{attrs:{class:"token boolean"}},[t._v("false")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{attrs:{class:"token constant"}},[t._v("PRODUCTION")]),t._v(" "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{attrs:{class:"token boolean"}},[t._v("true")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{attrs:{class:"token comment"}},[t._v("// etc.")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",[s("code",[this._v("uglifyjs build/defines.js js/foo.js js/bar.js... -c\n")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("UglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The build will contain the "),e("code",[t._v("const")]),t._v(" declarations if you use\nthem. If you are targeting < ES6 environments which does not support "),e("code",[t._v("const")]),t._v(",\nusing "),e("code",[t._v("var")]),t._v(" with "),e("code",[t._v("reduce_vars")]),t._v(" (enabled by default) should suffice.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("a",{attrs:{name:"codegen-options"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"conditional-compilation-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#conditional-compilation-api","aria-hidden":"true"}},[this._v("#")]),this._v(" Conditional compilation, API")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("You can also use conditional compilation via the programmatic API. With the difference that the\nproperty name is "),s("code",[this._v("global_defs")]),this._v(" and is a compressor property:")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("uglifyJS"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("minify")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"input.js"')]),e("span",{attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    compress"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        dead_code"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token boolean"}},[t._v("true")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        global_defs"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{attrs:{class:"token constant"}},[t._v("DEBUG")]),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n        "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"beautifier-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#beautifier-options","aria-hidden":"true"}},[this._v("#")]),this._v(" Beautifier options")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("The code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass "),s("code",[this._v("--beautify")]),this._v(" ("),s("code",[this._v("-b")]),this._v(").  Optionally you\ncan pass additional arguments that control the code output:")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[e("code",[t._v("beautify")]),t._v(" (default "),e("code",[t._v("true")]),t._v(") -- whether to actually beautify the output.\nPassing "),e("code",[t._v("-b")]),t._v(" will set this to true, but you might need to pass "),e("code",[t._v("-b")]),t._v(" even\nwhen you want to generate minified code, in order to specify additional\narguments, so you can use "),e("code",[t._v("-b beautify=false")]),t._v(" to override it.")]),t._v(" "),e("li",[e("code",[t._v("indent-level")]),t._v(" (default 4)")]),t._v(" "),e("li",[e("code",[t._v("indent-start")]),t._v(" (default 0) -- prefix all lines by that many spaces")]),t._v(" "),e("li",[e("code",[t._v("quote-keys")]),t._v(" (default "),e("code",[t._v("false")]),t._v(") -- pass "),e("code",[t._v("true")]),t._v(" to quote all keys in literal\nobjects")]),t._v(" "),e("li",[e("code",[t._v("space-colon")]),t._v(" (default "),e("code",[t._v("true")]),t._v(") -- insert a space after the colon signs")]),t._v(" "),e("li",[e("code",[t._v("ascii-only")]),t._v(" (default "),e("code",[t._v("false")]),t._v(") -- escape Unicode characters in strings and\nregexps (affects directives with non-ascii characters becoming invalid)")]),t._v(" "),e("li",[e("code",[t._v("inline-script")]),t._v(" (default "),e("code",[t._v("false")]),t._v(") -- escape the slash in occurrences of\n"),e("code",[t._v("</script")]),t._v(" in strings")]),t._v(" "),e("li",[e("code",[t._v("width")]),t._v(" (default 80) -- only takes effect when beautification is on, this\nspecifies an (orientative) line width that the beautifier will try to\nobey.  It refers to the width of the line text (excluding indentation).\nIt doesn't work very well currently, but it does make the code generated\nby UglifyJS more readable.")]),t._v(" "),e("li",[e("code",[t._v("max-line-len")]),t._v(" (default 32000) -- maximum line length (for uglified code)")]),t._v(" "),e("li",[e("code",[t._v("bracketize")]),t._v(" (default "),e("code",[t._v("false")]),t._v(") -- always insert brackets in "),e("code",[t._v("if")]),t._v(", "),e("code",[t._v("for")]),t._v(",\n"),e("code",[t._v("do")]),t._v(", "),e("code",[t._v("while")]),t._v(" or "),e("code",[t._v("with")]),t._v(" statements, even if their body is a single\nstatement.")]),t._v(" "),e("li",[e("code",[t._v("semicolons")]),t._v(" (default "),e("code",[t._v("true")]),t._v(") -- separate statements with semicolons.  If\nyou pass "),e("code",[t._v("false")]),t._v(" then whenever possible we will use a newline instead of a\nsemicolon, leading to more readable output of uglified code (size before\ngzip could be smaller; size after gzip insignificantly larger).")]),t._v(" "),e("li",[e("code",[t._v("preamble")]),t._v(" (default "),e("code",[t._v("null")]),t._v(") -- when passed it must be a string and\nit will be prepended to the output literally.  The source map will\nadjust for this text.  Can be used to insert a comment containing\nlicensing information, for example.")]),t._v(" "),e("li",[e("code",[t._v("quote_style")]),t._v(" (default "),e("code",[t._v("0")]),t._v(") -- preferred quote style for strings (affects\nquoted property names and directives as well):\n"),e("ul",[e("li",[e("code",[t._v("0")]),t._v(" -- prefers double quotes, switches to single quotes when there are\nmore double quotes in the string itself.")]),t._v(" "),e("li",[e("code",[t._v("1")]),t._v(" -- always use single quotes")]),t._v(" "),e("li",[e("code",[t._v("2")]),t._v(" -- always use double quotes")]),t._v(" "),e("li",[e("code",[t._v("3")]),t._v(" -- always use the original quotes")])])]),t._v(" "),e("li",[e("code",[t._v("keep_quoted_props")]),t._v(" (default "),e("code",[t._v("false")]),t._v(") -- when turned on, prevents stripping\nquotes from property names in object literals.")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"keeping-copyright-notices-or-other-comments"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#keeping-copyright-notices-or-other-comments","aria-hidden":"true"}},[this._v("#")]),this._v(" Keeping copyright notices or other comments")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("You can pass "),s("code",[this._v("--comments")]),this._v(' to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain "@preserve",\n"@license" or "@cc_on" (conditional compilation for IE).  You can pass\n'),s("code",[this._v("--comments all")]),this._v(" to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example "),s("code",[this._v("--comments '/foo|bar/'")]),this._v(' will keep only comments that contain "foo" or "bar".')])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{attrs:{class:"token function"}},[t._v("f")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),e("span",{attrs:{class:"token comment"}},[t._v("/** @preserve Foo Bar */")]),t._v("\n\t"),e("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{attrs:{class:"token function"}},[t._v("g")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t  "),e("span",{attrs:{class:"token comment"}},[t._v("// this function is never called")]),t._v("\n\t"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),e("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{attrs:{class:"token function"}},[t._v("something")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v('Even though it has "@preserve", the comment will be lost because the inner\nfunction '),s("code",[this._v("g")]),this._v(" (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"support-for-the-spidermonkey-ast"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#support-for-the-spidermonkey-ast","aria-hidden":"true"}},[this._v("#")]),this._v(" Support for the SpiderMonkey AST")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",[s("code",[this._v("acorn file.js | uglifyjs --spidermonkey -m -c\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("The "),s("code",[this._v("--spidermonkey")]),this._v(" option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"use-acorn-for-parsing"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#use-acorn-for-parsing","aria-hidden":"true"}},[this._v("#")]),this._v(" Use Acorn for parsing")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("More for fun, I added the "),s("code",[this._v("--acorn")]),this._v(" option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will "),s("code",[this._v('require("acorn")')]),this._v(".")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"using-uglifyjs-to-transform-spidermonkey-ast"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-uglifyjs-to-transform-spidermonkey-ast","aria-hidden":"true"}},[this._v("#")]),this._v(" Using UglifyJS to transform SpiderMonkey AST")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{attrs:{class:"token function"}},[t._v("uglify")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ast"),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mangle"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{attrs:{class:"token comment"}},[t._v("// Conversion from SpiderMonkey AST to internal format")]),t._v("\n  "),e("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" uAST "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" UglifyJS"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("AST_Node"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("from_mozilla_ast")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ast"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{attrs:{class:"token comment"}},[t._v("// Compression")]),t._v("\n  uAST"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("figure_out_scope")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  uAST "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" UglifyJS"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("Compressor")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("compress")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uAST"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{attrs:{class:"token comment"}},[t._v("// Mangling (optional)")]),t._v("\n  "),e("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mangle"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    uAST"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("figure_out_scope")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    uAST"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("compute_char_frequency")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    uAST"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("mangle_names")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),e("span",{attrs:{class:"token comment"}},[t._v("// Back-conversion to SpiderMonkey AST")]),t._v("\n  "),e("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" uAST"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("to_mozilla_ast")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"api-reference"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#api-reference","aria-hidden":"true"}},[this._v("#")]),this._v(" API Reference")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" UglifyJS "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{attrs:{class:"token function"}},[t._v("require")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token string"}},[t._v('"uglify-js"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"the-simple-way"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-simple-way","aria-hidden":"true"}},[this._v("#")]),this._v(" The simple way")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("There's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with "),s("code",[this._v("minify")]),this._v(".\nExample:")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" UglifyJS"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("minify")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token string"}},[t._v('"/path/to/file.js"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("log")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("code"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{attrs:{class:"token comment"}},[t._v("// minified output")]),t._v("\n"),e("span",{attrs:{class:"token comment"}},[t._v("// if you need to pass code instead of file name")]),t._v("\n"),e("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" UglifyJS"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("minify")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token string"}},[t._v('"var b = function () {};"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("fromString"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token boolean"}},[t._v("true")]),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" UglifyJS"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("minify")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"file1.js"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"file2.js"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"file3.js"')]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("log")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("code"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" UglifyJS"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("minify")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"file1.js"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"file2.js"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"file3.js"')]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\toutSourceMap"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"out.js.map"')]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("log")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("code"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{attrs:{class:"token comment"}},[t._v("// minified output")]),t._v("\nconsole"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("log")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("map"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" UglifyJS"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("minify")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{attrs:{class:"token string"}},[t._v('"file1.js"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"var a = function () {};"')]),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  outSourceMap"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"out.js.map"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  outFileName"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"out.js"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  fromString"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("Note that the source map is not saved in a file, it's just returned in\n"),e("code",[t._v("result.map")]),t._v(".  The value passed for "),e("code",[t._v("outSourceMap")]),t._v(" is only used to set\n"),e("code",[t._v("//# sourceMappingURL=out.js.map")]),t._v(" in "),e("code",[t._v("result.code")]),t._v(". The value of\n"),e("code",[t._v("outFileName")]),t._v(" is only used to set "),e("code",[t._v("file")]),t._v(" attribute in source map file.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("You can set option "),s("code",[this._v("sourceMapInline")]),this._v(" to be "),s("code",[this._v("true")]),this._v(" and source map will\nbe appended to code.")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" UglifyJS"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("minify")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"file1.js"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"file2.js"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"file3.js"')]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\toutSourceMap"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"out.js.map"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tsourceRoot"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"http://example.com/src"')]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("If you're compressing compiled JavaScript and have a source map for it, you\ncan use the "),s("code",[this._v("inSourceMap")]),this._v(" argument:")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" UglifyJS"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("minify")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token string"}},[t._v('"compiled.js"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tinSourceMap"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"compiled.js.map"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\toutSourceMap"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"minified.js.map"')]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{attrs:{class:"token comment"}},[t._v("// same as before, it returns `code` and `map`")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("If your input source map is not in a file, you can pass it in as an object\nusing the "),s("code",[this._v("inSourceMap")]),this._v(" argument:")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" UglifyJS"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("minify")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token string"}},[t._v('"compiled.js"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tinSourceMap"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token constant"}},[t._v("JSON")]),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("parse")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_source_map_string"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\toutSourceMap"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"minified.js.map"')]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("The "),s("code",[this._v("inSourceMap")]),this._v(" is only used if you also request "),s("code",[this._v("outSourceMap")]),this._v(" (it makes\nno sense otherwise).")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("To set the source map url, use the "),s("code",[this._v("sourceMapUrl")]),this._v(" option.\nIf you're using the X-SourceMap header instead, you can just set the "),s("code",[this._v("sourceMapUrl")]),this._v(" option to false.\nDefaults to outSourceMap:")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" UglifyJS"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("minify")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"file1.js"')]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  outSourceMap"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"out.js.map"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  sourceMapUrl"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"localhost/out.js.map"')]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("p",[s("code",[this._v("warnings")]),this._v(" (default "),s("code",[this._v("false")]),this._v(") — pass "),s("code",[this._v("true")]),this._v(" to display compressor warnings.")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("p",[s("code",[this._v("fromString")]),this._v(" (default "),s("code",[this._v("false")]),this._v(") — if you pass "),s("code",[this._v("true")]),this._v(" then you can pass\nJavaScript source code, rather than file names.")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("p",[s("code",[this._v("mangle")]),this._v(" (default "),s("code",[this._v("true")]),this._v(") — pass "),s("code",[this._v("false")]),this._v(" to skip mangling names, or pass\nan object to specify mangling options (see below).")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("p",[s("code",[this._v("mangleProperties")]),this._v(" (default "),s("code",[this._v("false")]),this._v(") — pass an object to specify custom\nmangle property options.")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h5",{attrs:{id:"mangle"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mangle","aria-hidden":"true"}},[this._v("#")]),this._v(" mangle")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[e("p",[e("code",[t._v("except")]),t._v(" - pass an array of identifiers that should be excluded from mangling")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("toplevel")]),t._v(" — mangle names declared in the toplevel scope (disabled by\ndefault).")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("eval")]),t._v(" — mangle names visible in scopes where eval or with are used\n(disabled by default).")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("keep_fnames")]),t._v(" -- default "),e("code",[t._v("false")]),t._v(".  Pass "),e("code",[t._v("true")]),t._v(" to not mangle\nfunction names.  Useful for code relying on "),e("code",[t._v("Function.prototype.name")]),t._v(".\nSee also: the "),e("code",[t._v("keep_fnames")]),t._v(" "),e("a",{attrs:{href:"#compressor-options"}},[t._v("compress option")]),t._v(".")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{attrs:{class:"token comment"}},[t._v("//tst.js")]),t._v("\n"),e("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" globalVar"),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{attrs:{class:"token function"}},[t._v("funcName")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("firstLongName"),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" anotherLongName"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myVariable "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" firstLongName "),e("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("  anotherLongName"),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nUglifyJS"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("minify")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token string"}},[t._v('"tst.js"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("code"),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{attrs:{class:"token comment"}},[t._v("// 'function funcName(a,n){}var globalVar;'")]),t._v("\n\nUglifyJS"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("minify")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token string"}},[t._v('"tst.js"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" mangle"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" except"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{attrs:{class:"token string"}},[t._v("'firstLongName'")]),e("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("code"),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{attrs:{class:"token comment"}},[t._v("// 'function funcName(firstLongName,a){}var globalVar;'")]),t._v("\n\nUglifyJS"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("minify")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token string"}},[t._v('"tst.js"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" mangle"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" toplevel"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("code"),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{attrs:{class:"token comment"}},[t._v("// 'function n(n,a){}var a;'")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h5",{attrs:{id:"mangleproperties-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mangleproperties-options","aria-hidden":"true"}},[this._v("#")]),this._v(" mangleProperties options")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[e("code",[t._v("regex")]),t._v(" — Pass a RegExp to only mangle certain names (maps to the "),e("code",[t._v("--mangle-regex")]),t._v(" CLI arguments option)")]),t._v(" "),e("li",[e("code",[t._v("ignore_quoted")]),t._v(" – Only mangle unquoted property names (maps to the "),e("code",[t._v("--mangle-props 2")]),t._v(" CLI arguments option)")]),t._v(" "),e("li",[e("code",[t._v("debug")]),t._v(" – Mangle names with the original name still present (maps to the "),e("code",[t._v("--mangle-props-debug")]),t._v(" CLI arguments option). Defaults to "),e("code",[t._v("false")]),t._v(". Pass an empty string to enable, or a non-empty string to set the suffix.")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("We could add more options to "),s("code",[this._v("UglifyJS.minify")]),this._v(" — if you need additional\nfunctionality please suggest!")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"the-hard-way"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-hard-way","aria-hidden":"true"}},[this._v("#")]),this._v(" The hard way")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Following there's more detailed API info, in case the "),s("code",[this._v("minify")]),this._v(" function is\ntoo simple for your needs.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"the-parser"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-parser","aria-hidden":"true"}},[this._v("#")]),this._v(" The parser")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" toplevel_ast "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" UglifyJS"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("parse")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("code"),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("options")]),this._v(" is optional and if present it must be an object.  The following\nproperties are available:")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[e("code",[t._v("strict")]),t._v(" — disable automatic semicolon insertion and support for trailing\ncomma in arrays and objects")]),t._v(" "),e("li",[e("code",[t._v("bare_returns")]),t._v(" — Allow return outside of functions. (maps to the\n"),e("code",[t._v("--bare-returns")]),t._v(" CLI arguments option and available to "),e("code",[t._v("minify")]),t._v(" "),e("code",[t._v("parse")]),t._v("\nother options object)")]),t._v(" "),e("li",[e("code",[t._v("filename")]),t._v(" — the name of the file where this code is coming from")]),t._v(" "),e("li",[e("code",[t._v("toplevel")]),t._v(" — a "),e("code",[t._v("toplevel")]),t._v(" node (as returned by a previous invocation of\n"),e("code",[t._v("parse")]),t._v(")")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" toplevel "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{attrs:{class:"token keyword"}},[t._v("null")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfiles"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("forEach")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token keyword"}},[t._v("function")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("file"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),e("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" code "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("readFileSync")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("file"),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"utf8"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ttoplevel "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" UglifyJS"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("parse")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("code"),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tfilename"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" file"),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\ttoplevel"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" toplevel\n\t"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("After this, we have in "),s("code",[this._v("toplevel")]),this._v(" a big AST containing all our files, with\neach token having proper information about where it came from.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"scope-information"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scope-information","aria-hidden":"true"}},[this._v("#")]),this._v(" Scope information")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("UglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using "),s("code",[this._v("eval")]),this._v(" or the\n"),s("code",[this._v("with")]),this._v(" statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("toplevel"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("figure_out_scope")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"compression"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#compression","aria-hidden":"true"}},[this._v("#")]),this._v(" Compression")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" compressor "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" UglifyJS"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("Compressor")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" compressed_ast "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" compressor"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("compress")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("toplevel"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("The "),s("code",[this._v("options")]),this._v(" can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("The compressor is destructive, so don't rely that "),s("code",[this._v("toplevel")]),this._v(" remains the\noriginal tree.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"mangling"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mangling","aria-hidden":"true"}},[this._v("#")]),this._v(" Mangling")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("After compression it is a good idea to call again "),s("code",[this._v("figure_out_scope")]),this._v(" (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("compressed_ast"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("figure_out_scope")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncompressed_ast"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("compute_char_frequency")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncompressed_ast"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("mangle_names")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"generating-output"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#generating-output","aria-hidden":"true"}},[this._v("#")]),this._v(" Generating output")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("AST nodes have a "),s("code",[this._v("print")]),this._v(" method that takes an output stream.  Essentially,\nto generate code you do this:")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" stream "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" UglifyJS"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("OutputStream")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncompressed_ast"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("print")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stream"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" code "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" stream"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("toString")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{attrs:{class:"token comment"}},[t._v("// this is your minified code")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" code "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" compressed_ast"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("print_to_string")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("As usual, "),s("code",[this._v("options")]),this._v(" is optional.  The output stream accepts a lot of options,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are "),s("code",[this._v("source_map")]),this._v(" and "),s("code",[this._v("comments")]),this._v(".")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"keeping-comments-in-the-output"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#keeping-comments-in-the-output","aria-hidden":"true"}},[this._v("#")]),this._v(" Keeping comments in the output")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("In order to keep certain comments in the output you need to pass the\n"),e("code",[t._v("comments")]),t._v(" option.  Pass a RegExp (as string starting and closing with "),e("code",[t._v("/")]),t._v("\nor pass a RegExp object), a boolean or a function.  Stringified options\n"),e("code",[t._v("all")]),t._v(" and "),e("code",[t._v("some")]),t._v(" can be passed too, where "),e("code",[t._v("some")]),t._v(" behaves like it's cli\nequivalent "),e("code",[t._v("--comments")]),t._v(" without passing a value. If you pass a RegExp,\nonly those comments whose body matches the RegExp will be kept.  Note that body\nmeans without the initial "),e("code",[t._v("//")]),t._v(" or "),e("code",[t._v("/*")]),t._v(".  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[e("code",[t._v("type")]),t._v(': "comment1" for single-line comments or "comment2" for multi-line\ncomments')]),t._v(" "),e("li",[e("code",[t._v("value")]),t._v(": the comment body")]),t._v(" "),e("li",[e("code",[t._v("pos")]),t._v(" and "),e("code",[t._v("endpos")]),t._v(": the start/end positions (zero-based indexes) in the\noriginal code where this comment appears")]),t._v(" "),e("li",[e("code",[t._v("line")]),t._v(" and "),e("code",[t._v("col")]),t._v(": the line and column where this comment appears in the\noriginal code")]),t._v(" "),e("li",[e("code",[t._v("file")]),t._v(" — the file name of the original file")]),t._v(" "),e("li",[e("code",[t._v("nlb")]),t._v(" — true if there was a newline before this comment in the original\ncode, or if this comment contains a newline.")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Your function should return "),s("code",[this._v("true")]),this._v(" to keep the comment, or a falsy value\notherwise.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"generating-a-source-mapping"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#generating-a-source-mapping","aria-hidden":"true"}},[this._v("#")]),this._v(" Generating a source mapping")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" source_map "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" UglifyJS"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("SourceMap")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source_map_options"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" stream "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" UglifyJS"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("OutputStream")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),e("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v("\n\tsource_map"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" source_map\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncompressed_ast"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("print")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stream"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" code "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" stream"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("toString")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" map "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" source_map"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("toString")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{attrs:{class:"token comment"}},[t._v("// json output for your source map")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("The "),s("code",[this._v("source_map_options")]),this._v(" (optional) can contain the following properties:")])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("p",[s("code",[this._v("file")]),this._v(": the name of the JavaScript output file that this mapping refers to")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("p",[s("code",[this._v("orig")]),this._v(': the "original source map", handy when you compress generated JS\nand want to map the minified output back to the original code where it\ncame from.  It can be simply a string in JSON, or a JSON object containing\nthe original source map.')])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"support-for-const"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#support-for-const","aria-hidden":"true"}},[this._v("#")]),this._v(" Support for "),s("code",[this._v("const")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[e("code",[t._v("const")]),t._v(" in "),e("code",[t._v("uglify-js@2.x")]),t._v(" has function scope and as such behaves much like\n"),e("code",[t._v("var")]),t._v(" - unlike "),e("code",[t._v("const")]),t._v(" in ES2015 (ES6) which has block scope. It is recommended\nto avoid using "),e("code",[t._v("const")]),t._v(" for this reason as it will have undefined behavior when\nrun on an ES2015 compatible browser.")])}],!1,null,null,null);a.options.__file="README.md";s.default=a.exports}}]);
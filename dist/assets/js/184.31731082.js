(window.webpackJsonp=window.webpackJsonp||[]).push([[184],{182:function(e,t,n){"use strict";n.r(t);var i=n(0),o=Object(i.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[e._m(0),e._v(" "),n("p",[e._v("UglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.")]),e._v(" "),n("p",[e._v("This page documents the command line utility.  For\n"),n("a",{attrs:{href:"http://lisperator.net/uglifyjs/",target:"_blank",rel:"noopener noreferrer"}},[e._v("API and internals documentation see my website"),n("OutboundLink")],1),e._v(".\nThere's also an\n"),n("a",{attrs:{href:"http://lisperator.net/uglifyjs/#demo",target:"_blank",rel:"noopener noreferrer"}},[e._v("in-browser online demo"),n("OutboundLink")],1),e._v(" (for Firefox,\nChrome and probably Safari).")]),e._v(" "),e._m(1),e._v(" "),n("p",[e._v("First make sure you have installed the latest version of "),n("a",{attrs:{href:"http://nodejs.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("node.js"),n("OutboundLink")],1),e._v("\n(You may need to restart your computer after this step).")]),e._v(" "),n("p",[e._v("From NPM for use as a command line app:")]),e._v(" "),e._m(2),e._v(" "),n("p",[e._v("From NPM for programmatic use:")]),e._v(" "),e._m(3),e._v(" "),n("p",[e._v("From Git:")]),e._v(" "),e._m(4),e._v(" "),e._m(5),e._v(" "),e._m(6),e._v(" "),n("p",[e._v("UglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.")]),e._v(" "),n("p",[e._v("If you want to read from STDIN instead, pass a single dash instead of input\nfiles.")]),e._v(" "),n("p",[e._v("The available options are:")]),e._v(" "),e._m(7),e._v(" "),e._m(8),e._v(" "),e._m(9),e._v(" "),e._m(10),e._v(" "),e._m(11),e._v(" "),n("p",[e._v("For example:")]),e._v(" "),e._m(12),e._v(" "),e._m(13),e._v(" "),e._m(14),e._v(" "),n("p",[e._v("When you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.")]),e._v(" "),e._m(15),e._v(" "),e._m(16),e._v(" "),e._m(17),e._v(" "),e._m(18),e._v(" "),e._m(19),e._v(" "),e._m(20),e._v(" "),e._m(21),e._v(" "),e._m(22),e._v(" "),e._m(23),e._v(" "),e._m(24),e._v(" "),e._m(25),e._v(" "),e._m(26),e._v(" "),e._m(27),e._v(" "),e._m(28),e._v(" "),e._m(29),e._v(" "),e._m(30),e._v(" "),n("p",[e._v("and build your code like this:")]),e._v(" "),e._m(31),e._v(" "),e._m(32),e._v(" "),e._m(33),e._v(" "),e._m(34),e._v(" "),e._m(35),e._v(" "),e._m(36),e._v(" "),e._m(37),e._v(" "),e._m(38),e._v(" "),n("p",[e._v("Note, however, that there might be situations where comments are lost.  For\nexample:")]),e._v(" "),e._m(39),e._v(" "),e._m(40),e._v(" "),n("p",[e._v("The safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.")]),e._v(" "),e._m(41),e._v(" "),n("p",[e._v("UglifyJS2 has its own abstract syntax tree format; for\n"),n("a",{attrs:{href:"http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/",target:"_blank",rel:"noopener noreferrer"}},[e._v("practical reasons"),n("OutboundLink")],1),e._v("\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.")]),e._v(" "),n("p",[e._v("For example "),n("a",{attrs:{href:"https://github.com/marijnh/acorn",target:"_blank",rel:"noopener noreferrer"}},[e._v("Acorn"),n("OutboundLink")],1),e._v(" is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:")]),e._v(" "),e._m(42),e._v(" "),e._m(43),e._v(" "),e._m(44),e._v(" "),e._m(45),e._v(" "),n("p",[e._v("Acorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.")]),e._v(" "),e._m(46),e._v(" "),n("p",[e._v("Assuming installation via NPM, you can load UglifyJS in your application\nlike this:")]),e._v(" "),e._m(47),e._v(" "),n("p",[e._v("It exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.")]),e._v(" "),e._m(48),e._v(" "),e._m(49),e._v(" "),e._m(50),e._v(" "),n("p",[e._v("You can also compress multiple files:")]),e._v(" "),e._m(51),e._v(" "),n("p",[e._v("To generate a source map:")]),e._v(" "),e._m(52),e._v(" "),n("p",[e._v("Note that the source map is not saved in a file, it's just returned in\n"),n("code",[e._v("result.map")]),e._v(".  The value passed for "),n("code",[e._v("outSourceMap")]),e._v(" is only used to set the\n"),n("code",[e._v("file")]),e._v(" attribute in the source map (see "),n("a",{attrs:{href:"https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit",target:"_blank",rel:"noopener noreferrer"}},[e._v("the spec"),n("OutboundLink")],1),e._v(").")]),e._v(" "),n("p",[e._v("You can also specify sourceRoot property to be included in source map:")]),e._v(" "),e._m(53),e._v(" "),e._m(54),e._v(" "),e._m(55),e._v(" "),e._m(56),e._v(" "),n("p",[e._v("Other options:")]),e._v(" "),n("ul",[e._m(57),e._v(" "),e._m(58),e._v(" "),e._m(59),e._v(" "),n("li",[n("p",[n("code",[e._v("output")]),e._v(" (default "),n("code",[e._v("null")]),e._v(") — pass an object if you wish to specify\nadditional "),n("a",{attrs:{href:"http://lisperator.net/uglifyjs/codegen",target:"_blank",rel:"noopener noreferrer"}},[e._v("output options"),n("OutboundLink")],1),e._v(".  The defaults are optimized\nfor best compression.")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("compress")]),e._v(" (default "),n("code",[e._v("{}")]),e._v(") — pass "),n("code",[e._v("false")]),e._v(" to skip compressing entirely.\nPass an object to specify custom "),n("a",{attrs:{href:"http://lisperator.net/uglifyjs/compress",target:"_blank",rel:"noopener noreferrer"}},[e._v("compressor options"),n("OutboundLink")],1),e._v(".")])])]),e._v(" "),e._m(60),e._v(" "),e._m(61),e._v(" "),e._m(62),e._v(" "),e._m(63),e._v(" "),e._m(64),e._v(" "),e._m(65),e._v(" "),e._m(66),e._v(" "),n("p",[e._v("The last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:")]),e._v(" "),e._m(67),e._v(" "),e._m(68),e._v(" "),e._m(69),e._v(" "),e._m(70),e._v(" "),e._m(71),e._v(" "),e._m(72),e._v(" "),n("p",[e._v("Like this:")]),e._v(" "),e._m(73),e._v(" "),e._m(74),e._v(" "),e._m(75),e._v(" "),e._m(76),e._v(" "),e._m(77),e._v(" "),e._m(78),e._v(" "),e._m(79),e._v(" "),e._m(80),e._v(" "),e._m(81),e._v(" "),n("p",[e._v("or, for a shortcut you can do:")]),e._v(" "),e._m(82),e._v(" "),e._m(83),e._v(" "),e._m(84),e._v(" "),e._m(85),e._v(" "),n("p",[e._v("The comment token has these properties:")]),e._v(" "),e._m(86),e._v(" "),e._m(87),e._v(" "),e._m(88),e._v(" "),n("p",[e._v("You need to pass the "),n("code",[e._v("source_map")]),e._v(" argument when calling "),n("code",[e._v("print")]),e._v(".  It needs\nto be a "),n("code",[e._v("SourceMap")]),e._v(" object (which is a thin wrapper on top of the\n"),n("a",{attrs:{href:"https://github.com/mozilla/source-map",target:"_blank",rel:"noopener noreferrer"}},[e._v("source-map"),n("OutboundLink")],1),e._v(" library).")]),e._v(" "),n("p",[e._v("Example:")]),e._v(" "),e._m(89),e._v(" "),e._m(90),e._v(" "),n("ul",[e._m(91),e._v(" "),n("li",[n("p",[n("code",[e._v("root")]),e._v(": the "),n("code",[e._v("sourceRoot")]),e._v(" property (see the "),n("a",{attrs:{href:"https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit",target:"_blank",rel:"noopener noreferrer"}},[e._v("spec"),n("OutboundLink")],1),e._v(")")])]),e._v(" "),e._m(92)])])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"uglifyjs-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#uglifyjs-2","aria-hidden":"true"}},[this._v("#")]),this._v(" UglifyJS 2")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"install"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#install","aria-hidden":"true"}},[this._v("#")]),this._v(" Install")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("npm install uglify-js -g\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("npm install uglify-js\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("git clone git://github.com/mishoo/UglifyJS2.git\ncd UglifyJS2\nnpm link .\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"usage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#usage","aria-hidden":"true"}},[this._v("#")]),this._v(" Usage")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("uglifyjs [input files] [options]\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v('--source-map       Specify an output file where to generate source map.\n                                                                      [string]\n--source-map-root  The path to the original source to be included in the\n                   source map.                                        [string]\n--source-map-url   The path to the source map to be added in //@\n                   sourceMappingURL.  Defaults to the value passed with\n                   --source-map.                                      [string]\n--in-source-map    Input source map, useful if you\'re compressing JS that was\n                   generated from some other original code.\n-p, --prefix       Skip prefix for original filenames that appear in source\n                   maps. For example -p 3 will drop 3 directories from file\n                   names and ensure they are relative paths.\n-o, --output       Output file (default STDOUT).\n-b, --beautify     Beautify output/specify output options.            [string]\n-m, --mangle       Mangle names/pass mangler options.                 [string]\n-r, --reserved     Reserved names to exclude from mangling.\n-c, --compress     Enable compressor/pass compressor options. Pass options\n                   like -c hoist_vars=false,if_return=false. Use -c with no\n                   argument to use the default compression options.   [string]\n-d, --define       Global definitions                                 [string]\n--comments         Preserve copyright comments in the output. By default this\n                   works like Google Closure, keeping JSDoc-style comments\n                   that contain "@license" or "@preserve". You can optionally\n                   pass one of the following arguments to this flag:\n                   - "all" to keep all comments\n                   - a valid JS regexp (needs to start with a slash) to keep\n                   only comments that match.\n                   Note that currently not *all* comments can be kept when\n                   compression is on, because of dead code removal or\n                   cascading statements into sequences.               [string]\n--stats            Display operations run time on STDERR.            [boolean]\n--acorn            Use Acorn for parsing.                            [boolean]\n--spidermonkey     Assume input fles are SpiderMonkey AST format (as JSON).\n                                                                     [boolean]\n--self             Build itself (UglifyJS2) as a library (implies\n                   --wrap=UglifyJS --export-all)                     [boolean]\n--wrap             Embed everything in a big function, making the “exports”\n                   and “global” variables available. You need to pass an\n                   argument to this option to specify the name that your\n                   module will take when included in, say, a browser.\n                                                                      [string]\n--export-all       Only used when --wrap, this tells UglifyJS to add code to\n                   automatically export all globals.                 [boolean]\n--lint             Display some scope warnings                       [boolean]\n-v, --verbose      Verbose                                           [boolean]\n-V, --version      Print version number and exit.                    [boolean]\n')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Specify "),t("code",[this._v("--output")]),this._v(" ("),t("code",[this._v("-o")]),this._v(") to declare the output file.  Otherwise the output\ngoes to STDOUT.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"source-map-options"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#source-map-options","aria-hidden":"true"}},[this._v("#")]),this._v(" Source map options")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("UglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n"),t("code",[this._v("--source-map output.js.map")]),this._v(" (full path to the file where you want the\nsource map dumped).")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Additionally you might need "),t("code",[this._v("--source-map-root")]),this._v(" to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use "),t("code",[this._v("--prefix")]),this._v(" ("),t("code",[this._v("-p")]),this._v(") to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("uglifyjs /home/doe/work/foo/src/js/file1.js \\\n         /home/doe/work/foo/src/js/file2.js \\\n         -o foo.min.js \\\n         --source-map foo.min.js.map \\\n         --source-map-root http://foo.com/src \\\n         -p 5 -c -m\n")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("The above will compress and mangle "),n("code",[e._v("file1.js")]),e._v(" and "),n("code",[e._v("file2.js")]),e._v(", will drop the\noutput in "),n("code",[e._v("foo.min.js")]),e._v(" and the source map in "),n("code",[e._v("foo.min.js.map")]),e._v(".  The source\nmapping will refer to "),n("code",[e._v("http://foo.com/src/js/file1.js")]),e._v(" and\n"),n("code",[e._v("http://foo.com/src/js/file2.js")]),e._v(" (in fact it will list "),n("code",[e._v("http://foo.com/src")]),e._v("\nas the source map root, and the original files as "),n("code",[e._v("js/file1.js")]),e._v(" and\n"),n("code",[e._v("js/file2.js")]),e._v(").")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"composed-source-map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#composed-source-map","aria-hidden":"true"}},[this._v("#")]),this._v(" Composed source map")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("To use this feature you need to pass "),t("code",[this._v("--in-source-map /path/to/input/source.map")]),this._v(".  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"mangler-options"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mangler-options","aria-hidden":"true"}},[this._v("#")]),this._v(" Mangler options")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("To enable the mangler you need to pass "),n("code",[e._v("--mangle")]),e._v(" ("),n("code",[e._v("-m")]),e._v(").  Optionally you\ncan pass "),n("code",[e._v("-m sort=true")]),e._v(" (we'll possibly have other flags in the future) in order\nto assign shorter names to most frequently used variables.  This saves a few\nhundred bytes on jQuery before gzip, but the output is "),n("em",[e._v("bigger")]),e._v(" after gzip\n(and seems to happen for other libraries I tried it on) therefore it's not\nenabled by default.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("When mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with "),t("code",[this._v("--reserved")]),this._v(" ("),t("code",[this._v("-r")]),this._v(") — pass a\ncomma-separated list of names.  For example:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("uglifyjs ... -m -r '$,require,exports'\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("to prevent the "),t("code",[this._v("require")]),this._v(", "),t("code",[this._v("exports")]),this._v(" and "),t("code",[this._v("$")]),this._v(" names from being changed.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"compressor-options"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#compressor-options","aria-hidden":"true"}},[this._v("#")]),this._v(" Compressor options")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("You need to pass "),n("code",[e._v("--compress")]),e._v(" ("),n("code",[e._v("-c")]),e._v(") to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n"),n("code",[e._v("foo=bar")]),e._v(", or just "),n("code",[e._v("foo")]),e._v(" (the latter implies a boolean option that you want\nto set "),n("code",[e._v("true")]),e._v("; it's effectively a shortcut for "),n("code",[e._v("foo=true")]),e._v(").")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("The defaults should be tuned for maximum compression on most code.  Here are\nthe available options (all are "),t("code",[this._v("true")]),this._v(" by default, except "),t("code",[this._v("hoist_vars")]),this._v("):")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("code",[e._v("sequences")]),e._v(" -- join consecutive simple statements using the comma operator")]),e._v(" "),n("li",[n("code",[e._v("properties")]),e._v(" -- rewrite property access using the dot notation, for\nexample "),n("code",[e._v('foo["bar"] → foo.bar')])]),e._v(" "),n("li",[n("code",[e._v("dead_code")]),e._v(" -- remove unreachable code")]),e._v(" "),n("li",[n("code",[e._v("drop_debugger")]),e._v(" -- remove "),n("code",[e._v("debugger;")]),e._v(" statements")]),e._v(" "),n("li",[n("code",[e._v("unsafe")]),e._v(' -- apply "unsafe" transformations (discussion below)')]),e._v(" "),n("li",[n("code",[e._v("conditionals")]),e._v(" -- apply optimizations for "),n("code",[e._v("if")]),e._v("-s and conditional\nexpressions")]),e._v(" "),n("li",[n("code",[e._v("comparisons")]),e._v(" -- apply certain optimizations to binary nodes, for example:\n"),n("code",[e._v("!(a <= b) → a > b")]),e._v(" (only when "),n("code",[e._v("unsafe")]),e._v("), attempts to negate binary nodes,\ne.g. "),n("code",[e._v("a = !b && !c && !d && !e → a=!(b||c||d||e)")]),e._v(" etc.")]),e._v(" "),n("li",[n("code",[e._v("evaluate")]),e._v(" -- attempt to evaluate constant expressions")]),e._v(" "),n("li",[n("code",[e._v("booleans")]),e._v(" -- various optimizations for boolean context, for example "),n("code",[e._v("!!a ? b : c → a ? b : c")])]),e._v(" "),n("li",[n("code",[e._v("loops")]),e._v(" -- optimizations for "),n("code",[e._v("do")]),e._v(", "),n("code",[e._v("while")]),e._v(" and "),n("code",[e._v("for")]),e._v(" loops when we can\nstatically determine the condition")]),e._v(" "),n("li",[n("code",[e._v("unused")]),e._v(" -- drop unreferenced functions and variables")]),e._v(" "),n("li",[n("code",[e._v("hoist_funs")]),e._v(" -- hoist function declarations")]),e._v(" "),n("li",[n("code",[e._v("hoist_vars")]),e._v(" -- hoist "),n("code",[e._v("var")]),e._v(" declarations (this is "),n("code",[e._v("false")]),e._v(" by default\nbecause it seems to increase the size of the output in general)")]),e._v(" "),n("li",[n("code",[e._v("if_return")]),e._v(" -- optimizations for if/return and if/continue")]),e._v(" "),n("li",[n("code",[e._v("join_vars")]),e._v(" -- join consecutive "),n("code",[e._v("var")]),e._v(" statements")]),e._v(" "),n("li",[n("code",[e._v("cascade")]),e._v(" -- small optimization for sequences, transform "),n("code",[e._v("x, x")]),e._v(" into "),n("code",[e._v("x")]),e._v("\nand "),n("code",[e._v("x = something(), x")]),e._v(" into "),n("code",[e._v("x = something()")])]),e._v(" "),n("li",[n("code",[e._v("warnings")]),e._v(" -- display warnings when dropping unreachable code or unused\ndeclarations etc.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"conditional-compilation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conditional-compilation","aria-hidden":"true"}},[this._v("#")]),this._v(" Conditional compilation")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("You can use the "),t("code",[this._v("--define")]),this._v(" ("),t("code",[this._v("-d")]),this._v(") switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass "),t("code",[this._v("--define DEBUG=false")]),this._v(" then, coupled with\ndead code removal UglifyJS will discard the following from the output:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v('if (DEBUG) {\n    console.log("debug stuff");\n}\n')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("UglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass "),t("code",[this._v("warnings=false")]),this._v(" to turn off "),t("em",[this._v("all")]),this._v(" warnings.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Another way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n"),t("code",[this._v("build/defines.js")]),this._v(" file with the following:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("const DEBUG = false;\nconst PRODUCTION = true;\n// etc.\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("uglifyjs build/defines.js js/foo.js js/bar.js... -c\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("UglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the "),t("code",[this._v("const")]),this._v(" declarations.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("a",{attrs:{name:"codegen-options"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"beautifier-options"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beautifier-options","aria-hidden":"true"}},[this._v("#")]),this._v(" Beautifier options")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("The code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass "),t("code",[this._v("--beautify")]),this._v(" ("),t("code",[this._v("-b")]),this._v(").  Optionally you\ncan pass additional arguments that control the code output:")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("code",[e._v("beautify")]),e._v(" (default "),n("code",[e._v("true")]),e._v(") -- whether to actually beautify the output.\nPassing "),n("code",[e._v("-b")]),e._v(" will set this to true, but you might need to pass "),n("code",[e._v("-b")]),e._v(" even\nwhen you want to generate minified code, in order to specify additional\narguments, so you can use "),n("code",[e._v("-b beautify=false")]),e._v(" to override it.")]),e._v(" "),n("li",[n("code",[e._v("indent-level")]),e._v(" (default 4)")]),e._v(" "),n("li",[n("code",[e._v("indent-start")]),e._v(" (default 0) -- prefix all lines by that many spaces")]),e._v(" "),n("li",[n("code",[e._v("quote-keys")]),e._v(" (default "),n("code",[e._v("false")]),e._v(") -- pass "),n("code",[e._v("true")]),e._v(" to quote all keys in literal\nobjects")]),e._v(" "),n("li",[n("code",[e._v("space-colon")]),e._v(" (default "),n("code",[e._v("true")]),e._v(") -- insert a space after the colon signs")]),e._v(" "),n("li",[n("code",[e._v("ascii-only")]),e._v(" (default "),n("code",[e._v("false")]),e._v(") -- escape Unicode characters in strings and\nregexps")]),e._v(" "),n("li",[n("code",[e._v("inline-script")]),e._v(" (default "),n("code",[e._v("false")]),e._v(") -- escape the slash in occurrences of\n"),n("code",[e._v("</script")]),e._v(" in strings")]),e._v(" "),n("li",[n("code",[e._v("width")]),e._v(" (default 80) -- only takes effect when beautification is on, this\nspecifies an (orientative) line width that the beautifier will try to\nobey.  It refers to the width of the line text (excluding indentation).\nIt doesn't work very well currently, but it does make the code generated\nby UglifyJS more readable.")]),e._v(" "),n("li",[n("code",[e._v("max-line-len")]),e._v(" (default 32000) -- maximum line length (for uglified code)")]),e._v(" "),n("li",[n("code",[e._v("ie-proof")]),e._v(" (default "),n("code",[e._v("true")]),e._v(") -- generate “IE-proof” code (for now this\nmeans add brackets around the do/while in code like this: "),n("code",[e._v("if (foo) do something(); while (bar); else ...")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("bracketize")]),e._v(" (default "),n("code",[e._v("false")]),e._v(") -- always insert brackets in "),n("code",[e._v("if")]),e._v(", "),n("code",[e._v("for")]),e._v(",\n"),n("code",[e._v("do")]),e._v(", "),n("code",[e._v("while")]),e._v(" or "),n("code",[e._v("with")]),e._v(" statements, even if their body is a single\nstatement.")]),e._v(" "),n("li",[n("code",[e._v("semicolons")]),e._v(" (default "),n("code",[e._v("true")]),e._v(") -- separate statements with semicolons.  If\nyou pass "),n("code",[e._v("false")]),e._v(" then whenever possible we will use a newline instead of a\nsemicolon, leading to more readable output of uglified code (size before\ngzip could be smaller; size after gzip insignificantly larger).")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"keeping-copyright-notices-or-other-comments"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#keeping-copyright-notices-or-other-comments","aria-hidden":"true"}},[this._v("#")]),this._v(" Keeping copyright notices or other comments")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("You can pass "),t("code",[this._v("--comments")]),this._v(' to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain "@preserve",\n"@license" or "@cc_on" (conditional compilation for IE).  You can pass\n'),t("code",[this._v("--comments all")]),this._v(" to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example "),t("code",[this._v("--comments '/foo|bar/'")]),this._v(' will keep only comments that contain "foo" or "bar".')])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("function f() {\n  /** @preserve Foo Bar */\n  function g() {\n    // this function is never called\n  }\n  return something();\n}\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v('Even though it has "@preserve", the comment will be lost because the inner\nfunction '),t("code",[this._v("g")]),this._v(" (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"support-for-the-spidermonkey-ast"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#support-for-the-spidermonkey-ast","aria-hidden":"true"}},[this._v("#")]),this._v(" Support for the SpiderMonkey AST")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("acorn file.js | uglifyjs --spidermonkey -m -c\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("The "),t("code",[this._v("--spidermonkey")]),this._v(" option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"use-acorn-for-parsing"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#use-acorn-for-parsing","aria-hidden":"true"}},[this._v("#")]),this._v(" Use Acorn for parsing")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("More for fun, I added the "),t("code",[this._v("--acorn")]),this._v(" option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will "),t("code",[this._v('require("acorn")')]),this._v(".")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"api-reference"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#api-reference","aria-hidden":"true"}},[this._v("#")]),this._v(" API Reference")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v('var UglifyJS = require("uglify-js");\n')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"the-simple-way"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#the-simple-way","aria-hidden":"true"}},[this._v("#")]),this._v(" The simple way")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("There's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with "),t("code",[this._v("minify")]),this._v(".\nExample:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v('var result = UglifyJS.minify("/path/to/file.js");\nconsole.log(result.code); // minified output\n// if you need to pass code instead of file name\nvar result = UglifyJS.minify("var b = function () {};", {fromString: true});\n')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v('var result = UglifyJS.minify([ "file1.js", "file2.js", "file3.js" ]);\nconsole.log(result.code);\n')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v('var result = UglifyJS.minify([ "file1.js", "file2.js", "file3.js" ], {\n    outSourceMap: "out.js.map"\n});\nconsole.log(result.code); // minified output\nconsole.log(result.map);\n')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v('var result = UglifyJS.minify([ "file1.js", "file2.js", "file3.js" ], {\n    outSourceMap: "out.js.map",\n    sourceRoot: "http://example.com/src"\n});\n')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("If you're compressing compiled JavaScript and have a source map for it, you\ncan use the "),t("code",[this._v("inSourceMap")]),this._v(" argument:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v('var result = UglifyJS.minify("compiled.js", {\n    inSourceMap: "compiled.js.map",\n    outSourceMap: "minified.js.map"\n});\n// same as before, it returns `code` and `map`\n')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("The "),t("code",[this._v("inSourceMap")]),this._v(" is only used if you also request "),t("code",[this._v("outSourceMap")]),this._v(" (it makes\nno sense otherwise).")])},function(){var e=this.$createElement,t=this._self._c||e;return t("li",[t("p",[t("code",[this._v("warnings")]),this._v(" (default "),t("code",[this._v("false")]),this._v(") — pass "),t("code",[this._v("true")]),this._v(" to display compressor warnings.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("li",[t("p",[t("code",[this._v("fromString")]),this._v(" (default "),t("code",[this._v("false")]),this._v(") — if you pass "),t("code",[this._v("true")]),this._v(" then you can pass\nJavaScript source code, rather than file names.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("li",[t("p",[t("code",[this._v("mangle")]),this._v(" — pass "),t("code",[this._v("false")]),this._v(" to skip mangling names.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("We could add more options to "),t("code",[this._v("UglifyJS.minify")]),this._v(" — if you need additional\nfunctionality please suggest!")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"the-hard-way"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#the-hard-way","aria-hidden":"true"}},[this._v("#")]),this._v(" The hard way")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Following there's more detailed API info, in case the "),t("code",[this._v("minify")]),this._v(" function is\ntoo simple for your needs.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"the-parser"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#the-parser","aria-hidden":"true"}},[this._v("#")]),this._v(" The parser")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("var toplevel_ast = UglifyJS.parse(code, options);\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("options")]),this._v(" is optional and if present it must be an object.  The following\nproperties are available:")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("code",[e._v("strict")]),e._v(" — disable automatic semicolon insertion and support for trailing\ncomma in arrays and objects")]),e._v(" "),n("li",[n("code",[e._v("filename")]),e._v(" — the name of the file where this code is coming from")]),e._v(" "),n("li",[n("code",[e._v("toplevel")]),e._v(" — a "),n("code",[e._v("toplevel")]),e._v(" node (as returned by a previous invocation of\n"),n("code",[e._v("parse")]),e._v(")")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("var toplevel = null;\nfiles.forEach(function(file){\n    var code = fs.readFileSync(file);\n    toplevel = UglifyJS.parse(code, {\n        filename: file,\n        toplevel: toplevel\n    });\n});\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("After this, we have in "),t("code",[this._v("toplevel")]),this._v(" a big AST containing all our files, with\neach token having proper information about where it came from.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"scope-information"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scope-information","aria-hidden":"true"}},[this._v("#")]),this._v(" Scope information")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("UglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using "),t("code",[this._v("eval")]),this._v(" or the\n"),t("code",[this._v("with")]),this._v(" statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("toplevel.figure_out_scope()\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"compression"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#compression","aria-hidden":"true"}},[this._v("#")]),this._v(" Compression")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("var compressor = UglifyJS.Compressor(options);\nvar compressed_ast = toplevel.transform(compressor);\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("The "),t("code",[this._v("options")]),this._v(" can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("The compressor is destructive, so don't rely that "),t("code",[this._v("toplevel")]),this._v(" remains the\noriginal tree.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"mangling"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mangling","aria-hidden":"true"}},[this._v("#")]),this._v(" Mangling")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("After compression it is a good idea to call again "),t("code",[this._v("figure_out_scope")]),this._v(" (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("compressed_ast.figure_out_scope();\ncompressed_ast.compute_char_frequency();\ncompressed_ast.mangle_names();\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"generating-output"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#generating-output","aria-hidden":"true"}},[this._v("#")]),this._v(" Generating output")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("AST nodes have a "),t("code",[this._v("print")]),this._v(" method that takes an output stream.  Essentially,\nto generate code you do this:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("var stream = UglifyJS.OutputStream(options);\ncompressed_ast.print(stream);\nvar code = stream.toString(); // this is your minified code\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("var code = compressed_ast.print_to_string(options);\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("As usual, "),t("code",[this._v("options")]),this._v(" is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are "),t("code",[this._v("source_map")]),this._v(" and "),t("code",[this._v("comments")]),this._v(".")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"keeping-comments-in-the-output"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#keeping-comments-in-the-output","aria-hidden":"true"}},[this._v("#")]),this._v(" Keeping comments in the output")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("In order to keep certain comments in the output you need to pass the\n"),t("code",[this._v("comments")]),this._v(" option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial "),t("code",[this._v("//")]),this._v(" or "),t("code",[this._v("/*")]),this._v(".  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("code",[e._v("type")]),e._v(': "comment1" for single-line comments or "comment2" for multi-line\ncomments')]),e._v(" "),n("li",[n("code",[e._v("value")]),e._v(": the comment body")]),e._v(" "),n("li",[n("code",[e._v("pos")]),e._v(" and "),n("code",[e._v("endpos")]),e._v(": the start/end positions (zero-based indexes) in the\noriginal code where this comment appears")]),e._v(" "),n("li",[n("code",[e._v("line")]),e._v(" and "),n("code",[e._v("col")]),e._v(": the line and column where this comment appears in the\noriginal code")]),e._v(" "),n("li",[n("code",[e._v("file")]),e._v(" — the file name of the original file")]),e._v(" "),n("li",[n("code",[e._v("nlb")]),e._v(" — true if there was a newline before this comment in the original\ncode, or if this comment contains a newline.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Your function should return "),t("code",[this._v("true")]),this._v(" to keep the comment, or a falsy value\notherwise.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"generating-a-source-mapping"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#generating-a-source-mapping","aria-hidden":"true"}},[this._v("#")]),this._v(" Generating a source mapping")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("var source_map = UglifyJS.SourceMap(source_map_options);\nvar stream = UglifyJS.OutputStream({\n    ...\n    source_map: source_map\n});\ncompressed_ast.print(stream);\n\nvar code = stream.toString();\nvar map = source_map.toString(); // json output for your source map\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("The "),t("code",[this._v("source_map_options")]),this._v(" (optional) can contain the following properties:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("li",[t("p",[t("code",[this._v("file")]),this._v(": the name of the JavaScript output file that this mapping refers to")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("li",[t("p",[t("code",[this._v("orig")]),this._v(': the "original source map", handy when you compress generated JS\nand want to map the minified output back to the original code where it\ncame from.  It can be simply a string in JSON, or a JSON object containing\nthe original source map.')])])}],!1,null,null,null);o.options.__file="README.md";t.default=o.exports}}]);